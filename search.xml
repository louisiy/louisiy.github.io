<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>When I learn C</title>
      <link href="/2023/01/07/When-I-learn-C/"/>
      <url>/2023/01/07/When-I-learn-C/</url>
      
        <content type="html"><![CDATA[<h1 id="HERE-IS-NOTE-FOR-Head-First-C-😃"><a href="#HERE-IS-NOTE-FOR-Head-First-C-😃" class="headerlink" title="HERE IS NOTE FOR Head First C 😃"></a>HERE IS NOTE FOR <em>Head First C</em> 😃</h1><h2 id="0-关于"><a href="#0-关于" class="headerlink" title="0 关于"></a>0 关于</h2><p>这里是符号说明，形如</p><ul><li>这是一条个人笔记</li></ul><blockquote><p>这是小拓展</p></blockquote><h2 id="1-入门"><a href="#1-入门" class="headerlink" title="1 入门"></a>1 入门</h2><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p><code>gcc -o</code> 设置文件名</p><p><code>./name</code> 类Unix操作系统中运行程序必须指定程序所在的目录，除非该程序目录已在PATH环境变量中</p><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>C不支持现成的字符串</p><p>定义字符串数组需额外加一个字符的空间来容纳<code>/0</code>（NULL字符），字符的索引值为偏移量</p><p>单引号通常用来表示单个字符，而双引号通常用来表示字符串。通常应该用双引号来定义字符串。用双引号定义的字符串叫字符串字面值（string literal），比起字符数组，它输入起来也更方便</p><p>总线错误（bus error）意味着程序无法更新那一块存储器空间</p><h3 id="等号"><a href="#等号" class="headerlink" title="等号"></a>等号</h3><p><code>num = 1</code> 等号用来赋值（assignment）</p><p><code>num == 1</code> 检查值是否相等</p><p><code>nunm += 2 or num -= 2</code> 加减2</p><p><code>num++ or num--</code> 加减1</p><h3 id="布尔运算"><a href="#布尔运算" class="headerlink" title="布尔运算"></a>布尔运算</h3><p><code>&amp;&amp; || !</code> 与或非</p><p><code>&amp;</code>和<code>|</code>操作符总是计算两个条件，而<code>&amp;&amp;</code>和<code>||</code>可以跳过第二个条件</p><p>位运算 <code>6 &amp; 4</code> 等于4</p><h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><p>switch语句检查一个单独的值。计算机会在第一个匹配的case语句处开始执行代码。在遇到break或到达switch语句的末尾前，代码会一直运行。</p><pre><code class="c">switch(train) &#123;case 37:    winnings = winnings + 50;    break;case 65:    puts(&quot;头等奖!&quot;);    winnings = winnings + 80;//执行完这条接着再+20这条，直到breakcase 12:    winnings = winnings + 20;    break;default:    winnings = 0;&#125;</code></pre><h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><pre><code class="c">int counter;for (counter = 1; counter &lt; 11; counter++) &#123;//(初始化循环变量；循环运行前检查；循环后执行)    printf(&quot;%i个枣\n&quot;, counter);&#125;</code></pre><p>可以用<code>break</code>在任意时刻退出循环</p><p>可以用<code>continue</code>随时跳到循环条件处</p><h3 id="链式赋值"><a href="#链式赋值" class="headerlink" title="链式赋值"></a>链式赋值</h3><p><code>x = y = 4;</code>给多个变量赋相同值</p><h2 id="2-指针"><a href="#2-指针" class="headerlink" title="2 指针"></a>2 指针</h2><p>使用指针的主要目的之一就是让函数共享存储器，指针只是一个保存存储器地址的变量，它们是进程存储器中真实编号的地址</p><h3 id="储存器"><a href="#储存器" class="headerlink" title="储存器"></a>储存器</h3><p>局部变量保存在栈（Stack），全局变量保存在全局量区（Globals）</p><p><code>&amp;x</code>指x的地址 <code>%p</code>来格式化输出</p><blockquote><p>栈<br>这是存储器用来保存局部变量的部分。每当调用函数，函数的所有局部变量都在栈上创建。它之所以叫栈是因为它看起来就像堆积而成的栈板：当进入函数时，变量会放到栈顶；离开函数时，把变量从栈顶拿走。奇怪的是，栈做起事来颠三倒四，它从存储器的顶部开始，向下增长。</p><p>堆<br>堆用于动态存储：程序在运行时创建一些数据，然后使用很长一段时间。</p><p>全局量<br>全局量位于所有函数之外，并对所有函数可见。程序一开始运行时就会创建全局量，可以修改它们，不像常量。</p><p>常量<br>常量也在程序一开始运行时创建，但它们保存在只读存储器中。常量是一些在程序中要用到的不变量，你不会想修改它们的值，例如字符串字面值。</p><p>代码<br>最后是代码段，很多操作系统都把代码放在存储器地址的低位。代码段也是只读的，它是存储器中用来加载机器代码的部分。</p></blockquote><h3 id="int"><a href="#int" class="headerlink" title="int *"></a>int *</h3><p><code>int *address_of_x = &amp;x;</code></p><p><code>*</code>来解引用，如<code>int value_stored = *address_of_x;</code> 、<code>*address_of_x = 99;</code></p><h3 id="sizeof（）"><a href="#sizeof（）" class="headerlink" title="sizeof（）"></a>sizeof（）</h3><p>这是个运算符</p><pre><code class="c">sizeof(int);sizeof(&quot;Turtles!&quot;);//返回9</code></pre><h3 id="数组变量"><a href="#数组变量" class="headerlink" title="数组变量"></a>数组变量</h3><p>数组变量可以被用作指针，指向数组中的第一个元素。函数参数声明如为数组，则其会被当作指针处理</p><p>计算机不会为数组变量分配任何空间，编译器仅在出现它的地方把它替换成数组的起始地址，所以不能把它指向任何其他地方</p><blockquote><p>指针退化</p><p>假如把数组赋给指针变量，指针变量只会包含数组的地址信息，而对数组的长度一无所知，相当于指针丢失了一些信息，也就是指针退化。</p><p>只要把数组传递给函数，数组免不了退化为指针，但需要记清楚代码中有哪些地方发生过数组退化，因为它们会引发一些不易察觉的错误。</p></blockquote><pre><code class="c">int drinks[] = &#123;4, 2, 3&#125;;//drinks[i] == *(drinks + i)doses[3] == *(doses + 3) == *(3 + doses) == 3[doses]</code></pre><h3 id="指针类型"><a href="#指针类型" class="headerlink" title="指针类型"></a>指针类型</h3><p>指针之所以有类型，是因为编译器在指针算术运算时需要知道加几</p><p>如<code>int nums[] = &#123;1, 2, 3&#125;;</code>中<code>nums</code>与<code>nums+1</code>的地址间隔4个字节（如果int通常占4个字节）</p><ul><li>这里的数组内的每一个值都是int类型，都占4字节</li></ul><h3 id="scanf-vs-fgets"><a href="#scanf-vs-fgets" class="headerlink" title="scanf() vs fgets()"></a>scanf() vs fgets()</h3><p><code>scanf()</code>会导致缓冲区溢出,引发段错误（abort trap）,应限制<code>scanf()</code>读取字符串的长度</p><p><code>fgets(char指针，sizeof(char指针),stdin)</code> stdin表示数据来自键盘</p><p><code>fgets()</code>缓冲区大小把<code>\0</code>字符也算了进去，所以不必像<code>scanf()</code>那样把长度减1</p><p>如果要向<code>fgets()</code>函数传递数组变量，就用<code>sizeof</code>，如果只是传指针，就应该输入想要的长度。</p><p><code>scanf()</code>不但允许输入多个字段，而且允许输入结构化数据，可以指定两个字段之间以什<br>么字符分割，<code>fgets()</code>只允许向缓冲区中输入一个字符串，而且只能是字符串，不能是其他数据类型，只能有一个缓冲区</p><p>当<code>scanf()</code>用<code>%s</code>读取字符串时，遇到空格就会停止。如果想要输入多个单词，需要多次调用<code>scanf()</code>，或使用一些复杂的正则表达式技巧，<code>fgets()</code>总能读取整个字符串</p><p><strong>Conclusion</strong>:如果需要输入由多个字段构成的结构化数据，可以使用<code>scanf()</code>；而如果想要输入一个非结构化的字符串，<code>fgets()</code>将是不二之选</p><h3 id="cards-还是-cards"><a href="#cards-还是-cards" class="headerlink" title="cards[ ]还是*cards"></a>cards[ ]还是*cards</h3><p>字符串字面值保存在只读存储器中。如果想要修改字符串，需要在新的数组中创建副本。可以将char指针声明成为<code>const char *</code>，以防代码用它修改字符串</p><h2 id="2-5-字符串原理"><a href="#2-5-字符串原理" class="headerlink" title="2.5 字符串原理"></a>2.5 字符串原理</h2><h3 id="创建数组的数组"><a href="#创建数组的数组" class="headerlink" title="创建数组的数组"></a>创建数组的数组</h3><pre><code class="c">char tracks[][80] = &#123;//第一对方括号用来访问由所有字符串组成的数组                              //第二对方括号用来访问每个单独的字符串    &quot;I left my heart in Harvard Med School&quot;,    &quot;Newark, Newark - a wonderful town&quot;,    &quot;Dancing with a Dork&quot;,    &quot;From here to maternity&quot;,    &quot;The girl from Iwo Jima&quot;,&#125;;</code></pre><p>可以用<code>char strings[...][...]</code>来创建数组的数组。<br>第一组方括号用来访问外层数组<br>第二组方括号用来访问每个内层数组中的元素</p><h3 id="使用string-h"><a href="#使用string-h" class="headerlink" title="使用string.h"></a>使用string.h</h3><pre><code class="c">#include &lt;stdio.h&gt;#include &lt;string.h&gt;strcmp()可以比较字符串strchr()用来在字符串中找到某个字符的位置strlen()可以得到字符串的长度strcpy()可以复制字符串</code></pre><p>使用以上代码引用头文件</p><h3 id="使用strstr（）"><a href="#使用strstr（）" class="headerlink" title="使用strstr（）"></a>使用strstr（）</h3><pre><code class="c">char s0[] = &quot;dysfunctional&quot;;char s1[] = &quot;fun&quot;;if (strstr(s0, s1))    puts(&quot;我在dysfunctional中找到fun了!&quot;);</code></pre><blockquote><p>全局变量位于任何函数之外，所有函数都可以调用它们。</p></blockquote><h3 id="指针的数组"><a href="#指针的数组" class="headerlink" title="指针的数组"></a>指针的数组</h3><pre><code class="c">char *names_for_dog[] = &#123;&quot;Bowser&quot;, &quot;Bonza&quot;, &quot;Snodgrass&quot;&#125;;//可以像访问数组的数组那样访问指针的数组,一个字符串字面值配一个指针</code></pre><h2 id="3-小工具"><a href="#3-小工具" class="headerlink" title="3 小工具"></a>3 小工具</h2><p>小工具设计遵循以下原则：</p><ul><li>从标准输入读取数据</li><li>在标准输出显示数据</li><li>处理文本数据，而不是难以阅读的二进制格式</li><li>只做一件简单的事</li><li>如果想完成一个不同的任务，应该另外写一个小工具</li><li>小工具通常读写文本数据</li></ul><h3 id="过滤器（filter）"><a href="#过滤器（filter）" class="headerlink" title="过滤器（filter）"></a>过滤器（filter）</h3><p>这是一种小工具，它逐行读取数据，对数据进行处理，再把数据写到某个地方。如果你的计算机是Unix，或你在Windows上安装了Cygwin，就已经拥有很多过滤器工具了。</p><blockquote><p>head：显示文件前几行的内容<br>tail：显示文件最后几行的内容<br>sed：流编辑器（stream editor），用来搜索和替换文本</p></blockquote><h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><p>可以重定向标准输入、标准输出，让程序从键盘以外的地方读数据、往显示器以外的地方写数据，如文件。可用命令</p><pre><code class="bash">$ ./geo2json &lt; gpsdata.csv &gt; output.json</code></pre><h3 id="错误状态码"><a href="#错误状态码" class="headerlink" title="错误状态码"></a>错误状态码</h3><p>程序在数据中发现错误就会退出，并把退出状态置为2。怎么在程序结束后检查错误状态呢？</p><p>要看操作系统</p><p>如果你的计算机是Mac、Linux、其他UNIX，或你在Windows上使用Cygwin，可以用以下命令显示错误状态：</p><pre><code class="bash">$ echo $?</code></pre><p>如果用的是Windows的命令提示符，则可以输入：</p><pre><code class="bash">C:\&gt; echo %ERRORLEVEL%</code></pre><p>这两条命令做了相同的事：显示程序结束时返回的那个数字。</p><h3 id="标准错误"><a href="#标准错误" class="headerlink" title="标准错误"></a>标准错误</h3><p>标准错误——一个用来发送错误消息的二号输出</p><p>人有两只耳朵和一张嘴，但进程有一只耳朵（标准输入）和两张嘴（标准输出和标准错误）</p><h3 id="fprintf-打印到数据流"><a href="#fprintf-打印到数据流" class="headerlink" title="fprintf()打印到数据流"></a>fprintf()打印到数据流</h3><p>printf()函数可以将数据发送到标准输出，但printf()只是fprintf()一个的特例</p><p>scanf()  fscanf(stdin, …)</p><pre><code class="c">printf(&quot;我喜欢乌龟！&quot;);fprintf(stdout, &quot;我喜欢乌龟！&quot;);//以上命令等价</code></pre><p>stdout 标准输出</p><p>stderr  标准错误</p><p>stdin 标准输入</p><p><code>&gt;</code>重定向标准输出<code>&lt;</code>重定向标准输入<code>2&gt;</code>重定向标准错误</p><h3 id="用管道连接输入与输出"><a href="#用管道连接输入与输出" class="headerlink" title="用管道连接输入与输出"></a>用管道连接输入与输出</h3><p>符号 | 表示管道（pipe），它能连接一个进程的标准输出与另一个进程的标准输入</p><p><code>bermuda | geo2json</code></p><pre><code class="bash">&gt; (./bermuda | ./geo2json) &lt; spooky.csv &gt; output.json</code></pre><p>只要在每个程序前加上一个<code>|</code>就可以连接多个程序，一连串相连的进程就叫流水线（pipeline），这时<code>&lt;</code>会把文件内容发送到流水线中第一个进程的标准输入，<code>&gt;</code>会捕获流水线中最后一个进程的标准输出</p><p>外面的括号是必需的,这对括号保证了数据文件由bermuda程序的标准输入来读取</p><h3 id="创建自己的数据流"><a href="#创建自己的数据流" class="headerlink" title="创建自己的数据流"></a>创建自己的数据流</h3><p>每条数据流用一个指向文件的指针来表示，可以用<code>fopen()</code>函数创建新数据流</p><pre><code class="c">FILE *in_file = fopen(&quot;input.txt&quot;, &quot;r&quot;);//将创建一条数据流，从文件中读取数据FILE *out_file = fopen(&quot;output.txt&quot;, &quot;w&quot;);//将创建一条数据流，向文件写数据</code></pre><p>fopen()函数接收两个参数：文件名和模式。共有三种模式</p><p>“w”&#x3D; 写（write）写文件<br>“r”&#x3D; 读（read）读文件<br>“a”&#x3D; 追加（append）在文件末尾追加数据</p><p>创建数据流后，可以用fprintf()往数据流中打印数据<br>可以用fscanf()函数从文件中读取数据</p><pre><code class="c">fprintf(out_file, &quot;%s 和 %s &quot;, &quot;红 &quot;, &quot;绿&quot;);fscanf(in_file, &quot;%79[^\n]\n&quot;, sentence);</code></pre><p>最当用完数据流，别忘了关闭它。虽然所有的数据流在程序结束后都会自动关闭，但你仍应该自己关闭它们</p><pre><code class="c">fclose(in_file);fclose(out_file);</code></pre><p>通常情况下，一个进程最多可以有256条数据流。但数据流的数量是有限的，用完后应该关闭它们。</p><p>最早FILE是用宏定义的，而宏的名字通常都要大写。</p><h3 id="首选项"><a href="#首选项" class="headerlink" title="首选项"></a>首选项</h3><p>对GUI程序来说，可以修改程序的首选项；而对于categorize这样的命令行程序，可以传给它命令行参数</p><pre><code class="c">int main(int argc, char *argv[])&#123;.... 做事情....&#125;</code></pre><p>main()函数有两个版本，一个有命令行参数，一个没有。命令行参数通过两个变量传递给main()函数，一个是参数的计数（argc），另一个是指针（指向参数字符串）数组</p><p>用户运行程序时，命令行中第一个参数是程序名。也就是说，第一个命令行参数其实是argv[1]</p><pre><code class="bash">&gt;./categorize mermaid mermaid.csv Elvis elvises.csv the_rest.csv   argv[0] argv[1]...argv[5]</code></pre><p>在程序中打开文件准备读写时，最好检查一下有没有错误发生。好在如果数据流打开失败，fopen()函数会返回0，也就是说如果想检查错误，可以将下面这段代码：</p><pre><code class="c">FILE *in = fopen(&quot;我不存在.txt&quot;, &quot;r&quot;);</code></pre><p>改成这样：</p><pre><code class="c">FILE *in;if (!(in = fopen(&quot;我不存在.txt&quot;, &quot;r&quot;))) &#123;    fprintf(stderr, &quot;无法打开文件.\n&quot;);    return 1;&#125;</code></pre><h3 id="使用库-getopt"><a href="#使用库-getopt" class="headerlink" title="使用库 getopt()"></a>使用库 getopt()</h3><p>unistd.h头文件不属于C标准库，而是POSIX库中的一员。POSIX的目标是创建一套能够在所有主流操作系统上使用的函数。</p><p>getop()使用范例</p><pre><code class="bash">&gt; rocket_to -e 4 -a Brasilia Tokyo London</code></pre><pre><code class="c">#include &lt;unistd.h&gt;...while ((ch = getopt(argc, argv, &quot;ae:&quot;)) != EOF)//ae:告诉getopt()函数“a和e是有效选项”，e后面的冒号表示“-e后面需要再跟一个参数”，getopt()会用optarg变量指向这个参数    switch(ch) &#123;    ...    case &#39;e&#39;:        engine_count = optarg;    ...    &#125;argc -= optind;//最后这两行用来跳过已读取的选项argv += optind;//optind保存了“getopt()函数从命令行读取了几个选项”</code></pre><p>经过一番处理，0号参数不再是程序名了。argv[0]会指向选项后的第一个命令行参数。循环结束以后，为了让程序读取命令行参数，需要调整一下argv和argc变量，跳过所有选项。</p><pre><code class="bash">&gt; rocket_to -e 4 -a Brasilia  Tokyo   London                    argv[0]  argv[1]  argv[2]</code></pre><p>Tips：</p><ul><li>可以多个选项<code>abc:d</code></li><li>可以合并命令行里的选项，如：<code>-td now</code> 与 <code>-d now -t</code></li><li>可以改变选项之间顺序，因为我们用循环读取选项，所以 <code>-d now -t</code>、<code>-t -d now</code>、<code>-td now</code>都一样(</li><li>只要程序在命令行看到一个前缀为－值，就会把它当成选项处理，前提是它必须在命令行参数之前出现</li><li>为了避免歧义，可以用<code>--</code>隔开参数和选项，比如<code>set_temper-ature -c -- -4</code>。getopt()看到<code>--</code>就会停止读取选项，程序会把后面的内容当成普通的命令行参数读取</li></ul><h2 id="4-使用多个源文件"><a href="#4-使用多个源文件" class="headerlink" title="4 使用多个源文件"></a>4 使用多个源文件</h2><h3 id="简明数据类型指南"><a href="#简明数据类型指南" class="headerlink" title="简明数据类型指南"></a>简明数据类型指南</h3><ul><li>char<br>字符在计算机的存储器中以字符编码的形式保存，字符编码是一个数字，因此在计算机看来，A与数字65完全一样（ASCII码）</li><li>int<br>如果你要保存一个整数，通常可以使用int。不同计算机中int的大小不同，但至少应该有16位。一般而言，int可以保存几万以内的数字</li><li>long<br>但如果想保存一个很大的计数呢？long数据类型就是为此而生的。在某些计算机中，long的大小是int的两倍，所以可以保存几十亿以内的数字；但大部分计算机的long和int一样大，因为在这些计算机中int本身就很大。long至少应该有32位</li><li>float<br>float是保存浮点数的基本数据类型。平时你会碰到很多浮点数，比如一杯香橙摩卡冰乐有多少毫升，就可以用float保存</li><li>double<br>但如果想表示很精确的浮点数呢？如果想让计算结果精确到小数点以后很多位，可以使用double。double比float多占一倍空间，可以保存更大、更精确的数字</li></ul><blockquote><p>为什么把一个很大的数保存到short中会变成负数？</p><p>数字以二进制保存，二进制的100 000看起来像这样：<br>x &lt;- 0001 1000 0110 1010 0000<br>当计算机想把这个值保存到short时，发现只能保存2个字节，所以只保存了数字右半边：<br>y &lt;- 1000 0110 1010 0000<br>最高位是1的二进制有符号数会被当成负数处理，它等价于下面的十进制数：<br>-31072</p></blockquote><h3 id="使用类型转换临时转换数值的类型"><a href="#使用类型转换临时转换数值的类型" class="headerlink" title="使用类型转换临时转换数值的类型"></a>使用类型转换临时转换数值的类型</h3><pre><code class="c">int x = 7;int y = 2;//float z = (float)x / (float)y;float z = (float)x / y//如果编译器发现有整数在加、减、乘、除浮点数，会自动完成转换，因此可以减少代码中显式类型转换的次数：printf(&quot;z = %f\n&quot;, z);</code></pre><h3 id="两个关键字"><a href="#两个关键字" class="headerlink" title="两个关键字"></a>两个关键字</h3><p>unsigned<br>用unsigned修饰的数值只能是非负数。由于无需记录负数，无符号数有更多的位可以使用，因此它可以保存更大的数。unsigned int可以保存0到最大值的数。这个最大值是int可以保存最大值的两倍左右。还有signed关键字，但你几乎从没见过，因为所有数据类型默认都是有符号的。<br><code>unsigned char c;</code></p><p>long<br>没错，你可以在数据类型前加long，让它变长。longint是加长版的int；long int可以保存范围更广的数字；long long比long更长；还可以对浮点数用long。(c99和c11支持long long)<br><code>long double d;</code></p><blockquote><p>%.2f把浮点数格式化为小数点后两位</p><p>%hi用来格式化short</p></blockquote><pre><code class="c">#include &lt;stdio.h&gt;#include &lt;limits.h&gt; //含有表示整型（比如int和char）大小的值#include &lt;float.h&gt; //含有表示float和double类型大小的值int main()&#123;printf(&quot;The value of INT_MAX is %i\n&quot;, INT_MAX);printf(&quot;The value of INT_MIN is %i\n&quot;, INT_MIN);printf(&quot;An int takes %z bytes\n&quot;, sizeof(int));printf(&quot;The value of FLT_MAX is %f\n&quot;, FLT_MAX);printf(&quot;The value of FLT_MIN is %.50f\n&quot;, FLT_MIN);printf(&quot;A float takes %z bytes\n&quot;, sizeof(float));    //可把INT和FLT替换成CHAR（char）、DBL（double）、SHRT（short）或LNG（long）return 0;&#125;</code></pre><blockquote><p>位数是计算机能够处理的数值长度</p></blockquote><h3 id="声明与定义分离"><a href="#声明与定义分离" class="headerlink" title="声明与定义分离"></a>声明与定义分离</h3><p><code>float add_with_tax()(float f);</code></p><p>声明只是一个函数签名：一条包含函数名、形参类型与返回类型的记录</p><h3 id="创建头文件"><a href="#创建头文件" class="headerlink" title="创建头文件"></a>创建头文件</h3><p>两步</p><ol><li>创建一个扩展名为.h的文件，把你的声明写在里面，不用在头文件中包含main()函数，反正也没有函数会调用它</li><li>在主代码中包含头文件，应该在代码的顶部加一句include</li></ol><p><code>#include &#39;asdf.h&#39;</code> <code>#include &lt;stdio.h&gt;</code></p><p>通常情况下，引号表示以相对路径查找头文件，如果不加目录名，只包含一个文件名，编译器就会在当前目录下查找头文件；如果用了尖括号，编译器就会以绝对路径查找头文件</p><p>当编译器看到尖括号，就会到标准库代码所在目录查找头文件，但现在你的头文件和.c文件在同一目录下，用引号把文件名括起来，编译器就会在本地查找文件。本地头文件也可以带目录名，但通常会把它和C文件放在相同目录中。</p><p>当编译器在代码中读到#include，就会读取头文件中的内容，仿佛它们本来就在代码中。</p><blockquote><p>如果编译器发现你调用了一个它没见过的函数，就会假设这个函数返回int</p></blockquote><h3 id="保留字"><a href="#保留字" class="headerlink" title="保留字"></a>保留字</h3><table><thead><tr><th align="center">1</th><th align="center">2</th><th align="center">3</th></tr></thead><tbody><tr><td align="center">auto</td><td align="center">if</td><td align="center">break</td></tr><tr><td align="center">int</td><td align="center">case</td><td align="center">long</td></tr><tr><td align="center">char</td><td align="center">register</td><td align="center">continue</td></tr><tr><td align="center">return</td><td align="center">default</td><td align="center">short</td></tr><tr><td align="center">do</td><td align="center">sizeof</td><td align="center">double</td></tr><tr><td align="center">static</td><td align="center">else</td><td align="center">struct</td></tr><tr><td align="center">entry</td><td align="center">switch</td><td align="center">extern</td></tr><tr><td align="center">typeof</td><td align="center">float</td><td align="center">union</td></tr><tr><td align="center">for</td><td align="center">unsigned</td><td align="center">goto</td></tr><tr><td align="center">while</td><td align="center">enum</td><td align="center">void</td></tr><tr><td align="center">const</td><td align="center">signed</td><td align="center">volatile</td></tr></tbody></table><h3 id="共享代码"><a href="#共享代码" class="headerlink" title="共享代码"></a>共享代码</h3><p>为了共享代码，可以把代码放到一个单独的C文件中。<br>需要把函数声明放到一个单独的.h头文件中。<br>在所有需要使用共享代码的C文件中包含这个头文件。<br>在编译的命令中列出所有C文件。</p><pre><code class="c">//encrypt.hvoid encrypt(char *message);</code></pre><pre><code class="c">//encrypt.c#include &quot;encrypt.h&quot;void encrypt(char *message)&#123;    char c;    while (*message) &#123;    *message = *message ^ 31;    message++;    &#125;&#125;</code></pre><pre><code class="c">//mainprog.c#include &lt;stdio.h&gt;#include &quot;encrypt.h&quot;int main()&#123;    char msg[80];    while (fgets(msg, 80, stdin)) &#123;    encrypt(msg);    printf(&quot;%s&quot;, msg);    &#125;&#125;</code></pre><pre><code class="bash">./ gcc message_hider.c encrypt.c -o message_hider</code></pre><blockquote><p>共享变量<br>为了防止两个源文件中的同名变量相互干扰，变量的作用域仅限于某个文件内。如果你想共享变量，就应该在头文件中声明，并在变量名前加上extern关键字：<br><code>extern int passcode;</code></p></blockquote><h3 id="gccの编译"><a href="#gccの编译" class="headerlink" title="gccの编译"></a>gccの编译</h3><p>gcc -c会编译代码，但不会链接目标文件</p><pre><code class="bash">./ gcc -c *.c</code></pre><p>gcc -o 链接，在例子中把目标文件链接为一个叫launch的可执行程序</p><pre><code class="bash">./ gcc *.o -o launch</code></pre><h3 id="Make"><a href="#Make" class="headerlink" title="Make"></a>Make</h3><p>如果你掌握了某样东西的简单规则，别多想，自动化它</p><p>make编译的文件叫目标（target）。目标可以是任何用其他文件生成的文件，也就是说目标可以是一批文件压缩而成的压缩文档</p><p>make需要知道：依赖项、生成方法。依赖项和生成方法合在一起构成了一条规则。有了规则，make就知道如何生成目标</p><blockquote><p>versions :</p><p>UNIX make</p><p>MinGW mingw32-make</p><p>Microsoft  NMAKE</p></blockquote><p>makefile文件书写</p><pre><code class="makefile">launch.o: launch.c launch.h thruster.h//目标：依赖项    gcc -c launch.c//生成方法（必须以tab开头）                                            //这是规则thruster.o: thruster.h thruster.c    gcc -c thruster.claunch: launch.o thruster.o    gcc launch.o thruster.o -o launch</code></pre><p>之后直接</p><pre><code class="bash">./ make launch</code></pre><blockquote><p>更自动化的工具：autoconf</p></blockquote><p>-&gt; <a href="http://tinyurl.com/yczmjx">GUN Make Manual</a></p><h2 id="5-结构、联合与位字段"><a href="#5-结构、联合与位字段" class="headerlink" title="5 结构、联合与位字段"></a>5 结构、联合与位字段</h2><h3 id="结构-Struct"><a href="#结构-Struct" class="headerlink" title="结构 Struct"></a>结构 Struct</h3><p>结构化数据结构 structured data type</p><p>结构是一种由一系列其他数据类型组成的数据类型。</p><pre><code class="c">struct fish &#123;    const char *name;    const char *species;    int teeth;    int age;&#125;;</code></pre><p>创建一个新自定义的数据类型，由其它一批数据组成。</p><ul><li>结构的大小固定</li><li>结构中的数据都有名字</li></ul><p>创建数据：</p><pre><code class="c">struct fish snappy = &#123;&quot;Snappy&quot;, &quot;Piranha&quot;, 69, 4&#125;</code></pre><p>把参数封装在结构中，代码会更稳定</p><p>结构变量是结构本身的名字</p><p>读取时只能按名访问，使用“.”运算符读取结构字段：&lt;结构&gt;.&lt;字段名&gt;语法（也叫“点表示法”）</p><pre><code class="c">struct fish snappy = &#123;&quot;Snappy&quot;, &quot;piranha&quot;, 69, 4&#125;;printf(&quot;Name = %s\n&quot;, snappy.name);</code></pre><p>为结构变量赋值相当于叫计算机复制数据</p><h3 id="结构中的结构"><a href="#结构中的结构" class="headerlink" title="结构中的结构"></a>结构中的结构</h3><p>为什么要嵌套定义结构？</p><p>之所以要这么做是为了对抗复杂性 。通过使用结构，我们可以建立更大的数据块。通过把结构组合在一起，我们可以创建更大的数据结构。本来你只能用int、short，但有了结构以后，就可以描述十分复杂的东西，比如网络流和视频图像。</p><pre><code class="c">struct preferences &#123;    const char *food;    float exercise_hours;&#125;;struct fish &#123;    const char *name;    const char *species;    int teeth;    int age;    struct preferences care; //nesting 嵌套   struct fish snappy = &#123;&quot;Snappy&quot;, &quot;Piranha&quot;, 69, 4, &#123;&quot;Meat&quot;, 7.5&#125;&#125;;   printf(&quot;Snappy 喜欢吃 %s&quot;, snappy.care.food);    printf(&quot;Snappy 喜欢锻炼 %f hours&quot;, snappy.care.exercise_hours); //访问&#125;;</code></pre><h3 id="typedef"><a href="#typedef" class="headerlink" title="typedef"></a>typedef</h3><p>在C语言中可以为结构创建别名，你只要在struct关键字前加上typedef，并在右花括号后写上类型名，就可以在任何地方使用这种新类型。</p><pre><code class="c">typedef struct cell_phone &#123;    int cell_no;    const char *wallpaper;    float minutes_of_charge;&#125; phone;</code></pre><p>当你用typedef为结构创建别名，需要决定别名叫什么。别名其实就是类型名，也就是说结构有两个名字：一个是结构名（struct cell_phone），另一个是类型名（phone）。为什么要有两个名字？一般一个就够了。如果只写类型名而不写结构名，编译器也没意见：</p><pre><code class="c">typedef struct &#123;    int cell_no;    const char *wallpaper;    float minutes_of_charge;&#125; phone;phone p = &#123;5557879, &quot;s.png&quot;, 1.35&#125;;</code></pre><p>这样的结构称为匿名结构。</p><h3 id="更新结构"><a href="#更新结构" class="headerlink" title="更新结构"></a>更新结构</h3><pre><code class="c">fish snappy = &#123;&quot;Snappy&quot;, &quot;piranha&quot;, 69, 4&#125;;printf(&quot;Hello %s\n&quot;, snappy.name);snappy.teeth = 68;</code></pre><p>计算机通过把值赋给函数形参的方式向函数传值，所有赋值都会复制</p><p>如果想让函数更新结构变量，就不能把结构作为参数传递，因为这样做仅仅是将数据的副本复制给<br>了函数。取而代之，可以传递结构的地址</p><p>还有一种表示结构指针的方法，它更易于阅读。</p><p><code>(*t).age</code> 和 <code>t-&gt;age</code> 等价</p><p>“指针-&gt;字段”等于“(*指针).字段”“-&gt;”表示法省掉了括号，代码更易阅读。</p><h3 id="联合？"><a href="#联合？" class="headerlink" title="联合？"></a>联合？</h3><p>每次创建结构实例，计算机都会在存储器中相继摆放字段</p><p>联合则不同。当定义联合时，计算机只为其中一个字段分配空间，并且计算机会为其中最大的字段分配空间，然后由你决定里面保存什么值</p><blockquote><p>计算机需要保证联合的大小固定。唯一的办法就是让它足够大，任何一个字段都能装得下</p></blockquote><pre><code class="c">typedef union &#123;//这里的关键字是union    short count;    float weight;    float volume;&#125; quantity;</code></pre><h3 id="使用联合"><a href="#使用联合" class="headerlink" title="使用联合"></a>使用联合</h3><ul><li><p>C89 方式</p><p>把值赋给联合中第一个字段</p><pre><code class="c">quantity q = &#123;4&#125;;</code></pre></li><li><p>指定初始化器（designated initializer）</p><pre><code class="c">quantity q = &#123; .weight = 1.5 &#125;;</code></pre></li><li><p>点 表示法</p><p>在第一行创建变量，然后在第二行设置字段的值</p><pre><code class="c">quantity q;q.volume = 3.7;</code></pre></li></ul><p>无论用哪种方法设置联合的值，都只会保存一条数据。联合只是提供了一种创建支持不同数据类型的变量的方法</p><p>“指定初始化器”也可以用来设置结构字段的初值，并提高代码的可读性</p><pre><code class="c">typedef struct &#123;    const char *color;    int gears;    int height;&#125; bike;bike b = &#123;.height=17, .gears=21&#125;;</code></pre><h3 id="联合与结构"><a href="#联合与结构" class="headerlink" title="联合与结构"></a>联合与结构</h3><pre><code class="c">typedef struct &#123;    const char *name ;    const char *country;    quantity amount;&#125; fruit_order;fruit_order apples = &#123;&quot;apples&quot;,&quot;English&quot;,.amount.weight = 4.2&#125;printf(&quot;This order contains %2.2f lbs of %s\n&quot;,apples.amount.weight, apples.name);</code></pre><h3 id="枚举变量保存符号"><a href="#枚举变量保存符号" class="headerlink" title="枚举变量保存符号"></a>枚举变量保存符号</h3><p>你需要某种方法记录我们在联合中保存了什么值。</p><p>结构与联合用分号（;）来分割数据项，而枚举用逗号。</p><pre><code class="c">enum colors &#123;RED, GREEN, PUCE&#125;;//可以用typedef为类型起个名字enum colors favorite = PUCE;</code></pre><p><em><strong>so？枚举好处？？？</strong></em> 限制我能给的值？ 实例感受下：</p><pre><code class="c">typedef enum &#123;    COUNT,    POUNDS,    PINTS&#125;unit_of_measure;typedef struct &#123;    const char *name;    const char *country;    quantity amount;    unit_of_measure units;&#125;fruit_order;void display(fruit_order order) &#123;    printf(&quot;This order contains &quot;);    if (order.units==PINTS) printf(&quot;%2.2f pints of %s\n&quot;, order.amount.volume, order.name);    else if (order.units==POUNDS) printf(&quot;%2.2f lbs of %s\n&quot;, order.amount.weight, order.name);    else printf(&quot;%i %s\n&quot;, order.amount.count, order.name);&#125;int main() &#123;    fruit_order strawberries= &#123;        &quot;strawberries&quot;,        &quot;Spain&quot;,        .amount.weight=17.6,        POUNDS    &#125;;    display(strawberries);    return 0;&#125;</code></pre><h3 id="位字段（bitfield）"><a href="#位字段（bitfield）" class="headerlink" title="位字段（bitfield）"></a>位字段（bitfield）</h3><p>C语言不支持二进制字面值，不过它支持十六进制字面值。每当C语言看到0x开头的数字，就认为它是以16为基数的数字（0x54）</p><p>可以用位字段指定一个字段有多少位</p><pre><code class="c">typedef struct &#123;    unsigned int low_pass_vcf:1;//位字段应当声明为unsigned int    unsigned int filter_coupler:1;//表示该字段只使用1位存储空间    unsigned int reverb:1;    unsigned int sequential:4;    ...&#125; synth;</code></pre><p>如果你有一连串的位字段，计算机会放在一起，以节省空间，也就是说如果有8个1位的位字段，计算机就会把它们保存在一个字节中</p><p>如果编译器发现结构中只有一个位字段，还是会把它填充成一个字，这就是为什么位字段总是组合在一起</p><h2 id="6-数据结构与动态存储"><a href="#6-数据结构与动态存储" class="headerlink" title="6 数据结构与动态存储"></a>6 数据结构与动态存储</h2><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><p>保存可变数量的数据，插入数据非常快</p><p>链表是一种抽象数据结构。链表是通用的，可以用来保存很多不同类型的数据</p><p>链表保存了一条数据和一个链向另一条数据的链接</p><p>如果一个结构包含一个链向同种结构的链接，那么这个结构就被称为递归结构</p><p>只要在结构中保存指针，island数据就含有下一个我们将游览的island的地址。只要我们的代码能访问一个island，就能够跳到下一个island。</p><p>在递归结构中，需要包含一个相同类型的指针， C语言的语法不允许用typedef别名来声明它，因此必须为结构起一个名字</p><pre><code class="c">typedef struct island &#123;char *name;char *opens;char *closes;struct island *next;&#125; island;island amity = &#123;&quot;Amity&quot;, &quot;09:00&quot;, &quot;17:00&quot;, NULL&#125;;island craggy = &#123;&quot;Craggy&quot;, &quot;09:00&quot;, &quot;17:00&quot;, NULL&#125;;island isla_nublar = &#123;&quot;Isla Nublar&quot;, &quot;09:00&quot;, &quot;17:00&quot;, NULL&#125;;island shutter = &#123;&quot;Shutter&quot;, &quot;09:00&quot;, &quot;17:00&quot;, NULL&#125;;amity.next = &amp;craggy;craggy.next = &amp;isla_nublar;isla_nublar.next = &amp;shutter;\\插入数据island skull = &#123;&quot;Skull&quot;, &quot;09:00&quot;, &quot;17:00&quot;, NULL&#125;;isla_nublar.next = &amp;skull;skull.next = &amp;shutter;void display(island *start)&#123;    island *i = start;    for(; i != NULL; i = i-&gt;next)&#123;    printf(&quot;Name:%s\n open:%s-%s\n&quot;,i-&gt;name,i-&gt;open,i-&gt;closes);            &#125;&#125;</code></pre><p>在C语言中，NULL的值实际上为0，NULL专门用来把某个指针设为0。</p><p>想快速地插入数据，就需要<strong>链表</strong>。想直接访问元素，就应该用<strong>数组</strong></p><h3 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h3><p>栈是存储器用来保存局部变量的区域。数据保存在局部变量中，一旦离开函数，变量就会消失。堆是程序中用来保存长期使用数据的地方。堆上的数据不会自动清除，因此堆是保存数据结构的绝佳场所</p><h3 id="malloc-与-free"><a href="#malloc-与-free" class="headerlink" title="malloc() 与 free()"></a>malloc() 与 free()</h3><p><code>malloc()</code>，memory allocation 申请储存器。接收一个参数：所需要的字节数。常与<code>sizeof</code>一起使用。<code>sizeof</code>告知某种数据类型在系统中占了多少字节。这种数据类型可以是结构，也可以是int或double这样的基本数据类型。返回一个指针，指针中保存了存储器块的起始地址。<code>free()</code>需要接收<code>malloc()</code>创建的存储器的地址。只要告诉C标准库存储器块从哪里开始，它就能查阅记录，知道要释放多少存储器。</p><pre><code class="c"># include &lt;stdlib.h&gt;//使用malloc()和free()需要包含这个头文件malloc(sizeof(island));island *p = malloc(sizeof(island));//返回的通用指针，即void*类型free(p);</code></pre><p>虽然程序结束以后，所有堆空间会自动释放，但用free()显式释放创建的所有动态存储器是一种好的做法</p><h3 id="字符串复制"><a href="#字符串复制" class="headerlink" title="字符串复制"></a>字符串复制</h3><p><code>string.h</code>的头文件中有一个函数<code>strdup()</code>。它可以把字符串复制到堆上</p><pre><code class="c">char *s = &quot;MONA LISA&quot;char *copy = strdup(s);</code></pre><p>作用机理为： 计算出字符串的长度，然后调用malloc()函数在堆上分配相应的空间。再把所有字符复制到堆上的新空间。</p><p>strdup()总是在堆上创建空间，而不是在栈上，因为栈用来保存局部变量，而局部变量很快就会被清除。</p><p>并且因为strdup()把新字符串放在堆上，所以千万记得要用free()函数释放空间。</p><p>有了动态分配存储器，就能在运行时创建需要的存储器。使用malloc()与free()，可以访问动态堆存储器。</p><h3 id="垃圾收集"><a href="#垃圾收集" class="headerlink" title="垃圾收集"></a>垃圾收集</h3><p>一些语言会跟踪程序在堆上分配的数据，当程序不再使用这些数据时，就会释放它们。</p><p>C语言非常古老，发明它的时候，绝大多数语言都没有自动 “垃圾回收”机制。</p><p>操作系统会在程序结束时清除所有存储器。不过，还是应该显式释放你创建的每样东西，这是一种好的习惯。</p><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p>一些举例：</p><ul><li>关联数组（也叫映射）<ul><li>连接“键”（key）信息与“值”（value）信息。可以用来连接两种不同类型的数据。</li></ul></li><li>双向链表<ul><li>和普通链表很像，但双向连接，可以双向处理。</li></ul></li><li>链表<ul><li>可以用来保存一串数据项，并使插入新数据项变得简单，但只能沿着一个方向处理。</li></ul></li><li>二叉树<ul><li>每一项都与其他两项相连，可以用来保存层次信息。</li></ul></li></ul><h3 id="valgrind"><a href="#valgrind" class="headerlink" title="valgrind"></a>valgrind</h3><p>valgrind通过伪造malloc()可以监控分配在堆上的数据。当程序想分配堆存储器时，valgrind将会拦截对malloc()和free()的调用，然后运行自己的malloc()和free()。valgrind<br>的malloc()会记录调用它的是哪段代码和分配了哪段存储器。程序结束时，valgrind会汇报堆上有哪些数据，并告诉这些数据是由哪段代码创建的。</p><p>调试信息是编译时打包到可执行文件中的附加数据，比如某段代码在源文件中的行号。只要有调试信息，valgrind就能提供更多有助于发现存储器泄漏的信息。</p><p>为了在可执行文件中加入调试信息，需要加上-g开关，并重新编译源代码。</p><pre><code class="bash">$ gcc -g spies.c -o spies// -g 开关告诉编译器要记录要编译代码的行号</code></pre><blockquote><p>书中的泄露错误没太看懂😥</p></blockquote><h2 id="7-高级函数"><a href="#7-高级函数" class="headerlink" title="7 高级函数"></a>7 高级函数</h2><h3 id="向函数传递函数"><a href="#向函数传递函数" class="headerlink" title="向函数传递函数"></a>向函数传递函数</h3><pre><code class="c">int sports_no_bieber(char *s)&#123;    return strstr(s, &quot;sports&quot;) &amp;&amp; !strstr(s, &quot;bieber&quot;);&#125;void find(int(*match)(char*))&#123;    int i;    puts(&quot;Search results:&quot;);    puts(&quot;------------------------------------&quot;);    for (i = 0; i &lt; NUM_ADS; i++) &#123;        if (match(ADS[i])) &#123;            printf(&quot;%s\n&quot;, ADS[i]);        &#125;    &#125;    puts(&quot;------------------------------------&quot;);&#125;find(sports_no_bieber);</code></pre><p>函数名是指向函数的指针，创建函数的同时也创建了一个同名函数指针，指针中保存了函数的地址，当调用函数时，你在使用函数指针。</p><blockquote><p>两者并不完全相同，函数名是L-value，而指针变量是R-value，因此函数名不能像指针变量那样自加或自减。</p></blockquote><p>函数有不同的返回类型和形参，所以它有许多不同的类型，没有<code>function*</code>的说法。</p><h3 id="创建函数指针"><a href="#创建函数指针" class="headerlink" title="创建函数指针"></a>创建函数指针</h3><p>需要把函数的返回类型和接收参数类型告诉C编译器。</p><pre><code class="c">int (*warp_fn)(int);warp_fn = go_to_warp_speed;//创建一个叫warp_fn的变量，用来保存go_to_warp_speed()函数的地址。相当于调go_to_warp_speed(4)warp_fn(4);char** (*names_fn)(char*,int);names_fn = album_names;//创建一个叫names_fn的变量，用来保存album_names()函数的地址。char** results = names_fn(&quot;Sacha Distel&quot;, 1972);</code></pre><p>一旦声明了函数指针变量，就可以像其他变量一样使用它，可以对它赋值，也可以把它加到数组中，还可以把它传给函数</p><blockquote><p>char**是一个指针，通常用来指向字符串数组</p></blockquote><p>函数指针是C语言最强大的特性之一</p><pre><code class="c">char** (*names_fn)(char*,int)返回类型       指针变量    参数类型            在这里声明形参的名称</code></pre><blockquote><p><code>match(ADS[i])</code>可以换成<code>(*match)(ADS[i])</code></p><p><code>find(sports_or_workout)</code>可以写成<code>find(&amp;sports_or_workout)</code></p><p>即使省略*和&amp;，C编译器也能识别它们，这样代码更好读</p></blockquote><p>指针太烂读不下去了😅</p><h2 id="8-静态库与动态库"><a href="#8-静态库与动态库" class="headerlink" title="8 静态库与动态库"></a>8 静态库与动态库</h2><h2 id="9-进程与系统调用"><a href="#9-进程与系统调用" class="headerlink" title="9 进程与系统调用"></a>9 进程与系统调用</h2><h2 id="10-进程间通信"><a href="#10-进程间通信" class="headerlink" title="10 进程间通信"></a>10 进程间通信</h2><h2 id="11-网络与套接字"><a href="#11-网络与套接字" class="headerlink" title="11 网络与套接字"></a>11 网络与套接字</h2><h2 id="12-线程"><a href="#12-线程" class="headerlink" title="12 线程"></a>12 线程</h2><h2 id="十大遗漏知识点"><a href="#十大遗漏知识点" class="headerlink" title="十大遗漏知识点"></a>十大遗漏知识点</h2><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><ul><li><p>递增与递减</p><p>++和–的位置决定了表达式返回i的原始值还是新值，前新后旧</p></li><li><p>三目运算符</p><pre><code class="c">if (x == 1)    return 2;else    return 3;return (x == 1) ? 2 : 3;//这里上下等价</code></pre></li><li><p>位运算</p><p>C语言可以用来编写底层代码，为此它提供了一组位运算符：</p><table><thead><tr><th align="center">运算符</th><th>说明</th></tr></thead><tbody><tr><td align="center">~a</td><td>a中所有位都取反</td></tr><tr><td align="center">a &amp; b</td><td>a中的位“与”b中的位</td></tr><tr><td align="center">a | b</td><td>a中的位“或”b中的位</td></tr><tr><td align="center">a ^ b</td><td>a中的位“异或”b中的位</td></tr><tr><td align="center">&lt;&lt;</td><td>位左移（值增加）</td></tr><tr><td align="center">&gt;&gt;</td><td>位右移（值减小）</td></tr></tbody></table><p>&lt;&lt;运算符可以用来快速地将某个整型值乘以2的幂，但小心千万别溢出</p></li><li><p>用逗号分割表达式<br>for循环在每次循环的末尾都会出现递增操作。<br>但如果你想在循环末尾执行多个运算怎么办？可以使用逗号运算符：<br><code>for (i = 0; i &lt; 10; i++, j++)</code> 递增i和j。<br>之所以要有逗号运算符是因为有时你不想用分号来分割表达式</p></li></ul><h3 id="预处理指令"><a href="#预处理指令" class="headerlink" title="预处理指令"></a>预处理指令</h3>]]></content>
      
      
      
        <tags>
            
            <tag> C notes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一封新年的信</title>
      <link href="/2023/01/01/LetterToYYY/"/>
      <url>/2023/01/01/LetterToYYY/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Sorry, you aren't her." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="21f1324709919b148606ffe069959cf10329bed122e8aefb2c4514c9f4e4ffc7"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">You know what this means.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> letter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杂记录</title>
      <link href="/2022/11/24/issues/"/>
      <url>/2022/11/24/issues/</url>
      
        <content type="html"><![CDATA[<h1 id="常见小问题"><a href="#常见小问题" class="headerlink" title="常见小问题"></a>常见小问题</h1><h2 id="终端无法运行脚本"><a href="#终端无法运行脚本" class="headerlink" title="终端无法运行脚本"></a>终端无法运行脚本</h2><p>参考<a href="https://go.microsoft.com/fwlink/?LinkID=135170">Microsoft文档</a> 中about_Execution_Policies</p><h2 id="备份博客源文件"><a href="#备份博客源文件" class="headerlink" title="备份博客源文件"></a>备份博客源文件</h2><p>有时候我们想换一台电脑继续写博客，这时候就可以将博客目录下的所有源文件都上传到github上面。</p><h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><p>首先在github博客仓库下新建一个分支<code>hexo_src</code>，然后<code>git clone</code>到本地，把<code>.git</code>文件夹拿出来，放在博客根目录下。</p><p>然后<code>git checkout -b hexo_src</code>切换到<code>hexo_src</code>分支，然后<code>git add .</code>，然后<code>git commit -m &quot;xxx&quot;</code>，最后<code>git push origin hexo_src</code>提交就行了。</p><h3 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h3><p>首先在指定文件夹clone下来hexo_src分支</p><pre><code class="bash">$ git clone -b hexo_src [仓库地址]</code></pre><p>在该clone下来的文件夹里去安装hexo</p><pre><code class="bash">$ cnpm install hexo$ cnpm install//这一句不知道和上面这一句有何区别</code></pre><blockquote><p>特别注意，hexo_src中的theme文件夹在上传分支后为空，需要再次从原主题仓库clone下来处理</p></blockquote><h2 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h2><p>hexo+github+vercel+godaddy+dnspod</p><p>框架+GitHub存储 +网站托管服务 +域名注册+域名服务器DNS</p><p>先用着</p><p>上面已经备份之后，再继续进行操作就只需在hexo_src分支下进行</p><p>hexo的操作，以及git操作</p><p>批处理</p><pre><code class="bash">hexo clean;hexo g;hexo d;git status ;git add . ;git commit -m &#39;new push&#39;;git push origin hexo_src</code></pre><p>挺方便</p><h2 id="添加404页面"><a href="#添加404页面" class="headerlink" title="添加404页面"></a>添加404页面</h2><p>(这里为暂时收录的参考)</p><p>原来的主题没有404页面，加一个也不是什么难事。首先在&#x2F;source&#x2F;目录下新建一个404.md，内容如下：</p><pre><code>title: 404date: 2019-07-19 16:41:10type: &quot;404&quot;layout: &quot;404&quot;description: &quot;你来到了没有知识的荒原 :(&quot;</code></pre><p>然后在&#x2F;themes&#x2F;matery&#x2F;layout&#x2F;目录下新建一个404.ejs文件，内容如下：</p><pre><code class="ejs">&lt;style type=&quot;text/css&quot;&gt;    /* don&#39;t remove. */    .about-cover &#123;        height: 75vh;    &#125;&lt;/style&gt;&lt;div class=&quot;bg-cover pd-header about-cover&quot;&gt;    &lt;div class=&quot;container&quot;&gt;        &lt;div class=&quot;row&quot;&gt;            &lt;div class=&quot;col s10 offset-s1 m8 offset-m2 l8 offset-l2&quot;&gt;                &lt;div class=&quot;brand&quot;&gt;                    &lt;div class=&quot;title center-align&quot;&gt;                        404                    &lt;/div&gt;                    &lt;div class=&quot;description center-align&quot;&gt;                        &lt;%= page.description %&gt;                    &lt;/div&gt;                &lt;/div&gt;            &lt;/div&gt;        &lt;/div&gt;    &lt;/div&gt;&lt;/div&gt;</code></pre><h2 id="图床"><a href="#图床" class="headerlink" title="图床"></a>图床</h2><p>采用</p><p> jsdelivr (cdn) + github 存储 + PicGo </p><p>方案</p><p>&#x2F;&#x2F; load any GitHub release, commit, or branch</p><p>&#x2F;&#x2F; note: we recommend using npm for projects that support it</p><p><a href="https://cdn.jsdelivr.net/gh/user/repo@version/filecdn+">https://cdn.jsdelivr.net/gh/user/repo@version/filecdn+</a></p><h2 id="遇到的一些问题"><a href="#遇到的一些问题" class="headerlink" title="遇到的一些问题"></a>遇到的一些问题</h2><p>1 Q&amp;E</p><pre><code class="bash">platform unsupported hexo-deployer-git@3.0.0 › hexo-fs@3.1.0 › chokidar@3.5.3 › fsevents@~2.3.2 Package require os(darwin) not compatible with your platform(win32)[fsevents@~2.3.2] optional install error: Package require os(darwin) not compatible with your platform(win32)</code></pre><p>A 这是一个可以忽略的错误，fsevents是可选的依赖，只能应用于maxOS系统，不适合Windows或者Linux，也就是忽略即可</p>]]></content>
      
      
      
        <tags>
            
            <tag> record&amp;reference </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>游玩LaTeX</title>
      <link href="/2022/11/23/LaTeX/"/>
      <url>/2022/11/23/LaTeX/</url>
      
        <content type="html"><![CDATA[<h1 id="LaTeX笔记"><a href="#LaTeX笔记" class="headerlink" title="LaTeX笔记"></a>LaTeX笔记</h1><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><pre><code class="latex">//English\documentclass&#123;article&#125;\begin&#123;document&#125;&quot;Hello world!&quot; from \LaTeX\end&#123;document&#125;//中文\documentclass&#123;ctexart&#125;\begin&#123;document&#125;“你好，世界！” 来自 \LaTeX&#123;&#125; 的问候  //怀疑这里新版本不需要&#123;&#125;占空格了\end&#123;document&#125;</code></pre><h2 id="相关概念辨析"><a href="#相关概念辨析" class="headerlink" title="相关概念辨析"></a>相关概念辨析</h2><h3 id="引擎"><a href="#引擎" class="headerlink" title="引擎"></a>引擎</h3><p>排版引擎是编译源代码并生成文档的程序，如pdfLaTeX、XeLaTeX等。有时也称为编译器</p><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><p>是定义了一组命令的代码集。如LaTeX。高纳德本人也编写了一个简单的plain TeX格式，但仍不便于使用</p><h3 id="编译命令"><a href="#编译命令" class="headerlink" title="编译命令"></a>编译命令</h3><p>是实际调用的、结合了引擎和格式的命令。如<code>xelatex</code>命令是结合了XeTeX引擎和LaTeX格式的一个编译命令</p>]]></content>
      
      
      
        <tags>
            
            <tag> LaTeX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chem-E-Car 小车动力控制电路部分记录</title>
      <link href="/2022/10/13/Car_Doc/"/>
      <url>/2022/10/13/Car_Doc/</url>
      
        <content type="html"><![CDATA[<h2 id="材料选用"><a href="#材料选用" class="headerlink" title="材料选用"></a>材料选用</h2><p>主板：ARDUINO UNO R3</p><p>拓展板：ARDUINO MOTOR SHIELD REV3</p>]]></content>
      
      
      
        <tags>
            
            <tag> Chem-E-Car </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ToDo</title>
      <link href="/2022/08/13/Todo/"/>
      <url>/2022/08/13/Todo/</url>
      
        <content type="html"><![CDATA[<h1 id="接下来的任务"><a href="#接下来的任务" class="headerlink" title="接下来的任务"></a>接下来的任务</h1><ul><li>hexo更深度自定义主题</li><li>favicon自定义</li><li>404页面</li><li>图床建设</li><li>图片模式选用</li><li>用户名重新选择</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> todo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Notes For Git</title>
      <link href="/2022/07/14/Notes-For-Git/"/>
      <url>/2022/07/14/Notes-For-Git/</url>
      
        <content type="html"><![CDATA[<h1 id="Notes-For-Git"><a href="#Notes-For-Git" class="headerlink" title="Notes For Git"></a>Notes For Git</h1><h2 id="Settings"><a href="#Settings" class="headerlink" title="Settings"></a>Settings</h2><pre><code class="bash">$ git config --list --show-originfile:D:/Git/etc/gitconfig       diff.astextplain.textconv=astextplainfile:D:/Git/etc/gitconfig       filter.lfs.clean=git-lfs clean -- %ffile:D:/Git/etc/gitconfig       filter.lfs.smudge=git-lfs smudge -- %ffile:D:/Git/etc/gitconfig       filter.lfs.process=git-lfs filter-processfile:D:/Git/etc/gitconfig       filter.lfs.required=truefile:D:/Git/etc/gitconfig       http.sslbackend=opensslfile:D:/Git/etc/gitconfig       http.sslcainfo=D:/Git/mingw64/ssl/certs/ca-bundle.crtfile:D:/Git/etc/gitconfig       core.autocrlf=truefile:D:/Git/etc/gitconfig       core.fscache=truefile:D:/Git/etc/gitconfig       core.symlinks=falsefile:D:/Git/etc/gitconfig       pull.rebase=falsefile:D:/Git/etc/gitconfig       credential.helper=managerfile:C:/Users/[]/.gitconfig        user.name=[]file:C:/Users/[]/.gitconfig        user.email=[]@[]$ git config --global user.name &quot;a&quot;$ git config --global user.email &quot;@&quot;$ git config --global core.editor &quot;code --wait&quot;$ git config --global core.editor &quot;code --wait&quot;$ git config --list$ git config user.name$ git config --global init.defaultBranch main$ git help &lt;verb&gt;$ git &lt;verb&gt; --help$ man git-&lt;verb&gt;</code></pre><p>There levels: <code>--local</code> &gt; <code>--global</code> &gt; <code>--system</code></p><p>On Windows systems, Git looks for the <code>.gitconfig</code> file in the $HOME directory (C:\Users$USER for most people). It also still looks for <code>[path]/etc/gitconfig</code>, although it’s relative to the MSys root, which is wherever you decide to install Git on your Windows system when you run the installer. </p><h2 id="Basics"><a href="#Basics" class="headerlink" title="Basics"></a>Basics</h2><h3 id="initializing"><a href="#initializing" class="headerlink" title="initializing"></a>initializing</h3><pre><code class="bash">$ cd D:/my_project$ git init</code></pre><p>to control a repository with git and this will create a file named <code>.git</code></p><p>we can initialize a repository like this:</p><pre><code class="bash">$ git add *.c$ git add LICENSE$ git commit -m &#39;Initial project version&#39;</code></pre><h3 id="cloning"><a href="#cloning" class="headerlink" title="cloning"></a>cloning</h3><p>we can clone a repository like this:</p><pre><code class="bash">$ git clone https://github.com/</code></pre><p>if want a new name </p><pre><code class="bash">$ git clone &lt;url&gt; name</code></pre><p>and there are other protocols that can be chosen(SSH)</p><h3 id="recording-changes"><a href="#recording-changes" class="headerlink" title="recording changes"></a>recording changes</h3><p>two states : tracked or untracked. To CHECK this :</p><pre><code class="bash">$ git statusOn branch masterYour branch is up-to-date with &#39;origin/master&#39;.nothing to commit, working tree clean$ git status -sM READMEMM RakefileA lib/git.rbM lib/simplegit.rb?? LICENSE.txt</code></pre><p>There are two columns to the output — the left-hand column indicates the status of the staging area and the right-hand column indicates the status of the working tree. </p><h3 id="Ignoring-Files"><a href="#Ignoring-Files" class="headerlink" title="Ignoring Files"></a>Ignoring Files</h3><pre><code class="bash">- .gitignore$ cat .gitignore*.[oa]*~# ignore all .a files*.a# but do track lib.a, even though you&#39;re ignoring .a files above!lib.a# only ignore the TODO file in the current directory, not subdir/TODO/TODO# ignore all files in any directory named buildbuild/# ignore doc/notes.txt, but not doc/server/arch.txtdoc/*.txt# ignore all .pdf files in the doc/ directory and any of its subdirectoriesdoc/**/*.pdf</code></pre><h3 id="Viewing-Your-Staged-and-Unstaged-Changes"><a href="#Viewing-Your-Staged-and-Unstaged-Changes" class="headerlink" title="Viewing Your Staged and Unstaged Changes"></a>Viewing Your Staged and Unstaged Changes</h3><p><code>git diff</code> shows you the exact lines added and removed — the patch, as it were</p><h3 id="Commit-Your-Changes"><a href="#Commit-Your-Changes" class="headerlink" title="Commit Your Changes"></a>Commit Your Changes</h3><p><code>git commit</code> 这样需要打开编辑器输入</p><p><code>git commmit -m &quot;There is message&quot;</code></p><pre><code class="bash">$ git commit -m &quot;Story 182: fix benchmarks for speed&quot;[master 463dc4f] Story 182: fix benchmarks for speed2 files changed, 2 insertions(+)create mode 100644 README</code></pre><p><code>git commit -a</code> 可以跳过stage阶段</p><h3 id="Removing-Files"><a href="#Removing-Files" class="headerlink" title="Removing Files"></a>Removing Files</h3><p>remove it from your tracked files, and also removes the file from your working directory so you don’t see it as an untracked file the next time around</p><p><code>rm</code> 直接删除，但是不stage</p><p><code>git rm</code> 删除，但是已经stage</p><p>If you modified the file or had already added it to the staging area, you must force the removal with the <code>-f</code> option. </p><p>to keep the file in your working tree but remove it from your staging area.</p><p><code>git rm --cached README</code></p><h3 id="Moving-Files"><a href="#Moving-Files" class="headerlink" title="Moving Files"></a>Moving Files</h3><p>重命名</p><pre><code class="bash">$ git mv README.md README$ git statusOn branch masterYour branch is up-to-date with &#39;origin/master&#39;.Changes to be committed:(use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)renamed: README.md -&gt; README</code></pre><p>相当于</p><pre><code class="bash">$ mv README.md README$ git rm README.md$ git add README</code></pre><h3 id="Viewing-the-Commit-History"><a href="#Viewing-the-Commit-History" class="headerlink" title="Viewing the Commit History"></a>Viewing the Commit History</h3><p><code>git log</code> 查看commit history</p><p><code>git log -patch</code> 显示每次的commit的不同之处</p><p><code>git log -2</code> 只看最近两条</p>]]></content>
      
      
      
        <tags>
            
            <tag> Git notes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Algorithm</title>
      <link href="/2022/06/28/Algorithm/"/>
      <url>/2022/06/28/Algorithm/</url>
      
        <content type="html"><![CDATA[<h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><h3 id="1dim-peak-finder"><a href="#1dim-peak-finder" class="headerlink" title="1dim peak finder"></a>1dim peak finder</h3><p>$$\Theta (n)  $$ </p><p>if we adopt <strong>divide &amp; conquer</strong> </p><p>the complexity will be </p><p>$$T(n) &#x3D; T(\frac n2)+ \Theta(1)$$</p><p>and there is the base case :</p><p>$$T(1)&#x3D;\Theta(1)$$</p><p>thus </p><p>$$<br>T(n)&#x3D; \Theta(1) +\Theta(1)+…+\Theta(1)<br>    &#x3D; \Theta(\log _{2} n)<br>$$</p>]]></content>
      
      
      
        <tags>
            
            <tag> algorithm notes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My Raspberry Pi</title>
      <link href="/2021/02/13/My-Raspberry-Pi/"/>
      <url>/2021/02/13/My-Raspberry-Pi/</url>
      
        <content type="html"><![CDATA[<h2 id="About-Raspberry-Pi"><a href="#About-Raspberry-Pi" class="headerlink" title="About Raspberry Pi"></a>About Raspberry Pi</h2><p>这里本来打算放张图片</p><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><h3 id="最理想情况"><a href="#最理想情况" class="headerlink" title="最理想情况"></a>最理想情况</h3><p>官网下载Pi OS镜像，烧录SD卡，连接好键盘显示屏，启动</p><h3 id="无显示屏"><a href="#无显示屏" class="headerlink" title="无显示屏"></a>无显示屏</h3><ul><li>开启ssh访问，在boot目录新建<code>ssh</code>的不带后缀名的空文件。</li><li>用RJ45网线连接笔记本电脑和树莓派。</li><li>等待树莓派启动完毕，打开笔记本电脑的网络和共享中心，可以看到出现了一个未识别网络，连接方式是以太网。然后再查看分配给这个以太网的接口IP地址（如192.168.137.1）</li><li>手机开热点，通过它可以让树莓派联网。在网络和共享中心中，点击无线网络-&gt;属性-&gt;共享 ，给“允许其它网络用户通过此计算机的internet来连接”打勾，然后确定。</li><li>打开CMD，输入以下命令查看网络接口信息：<code>arp -a</code></li><li>在前面查到的接口：192.168.137.1 下方找到第一个连接的ip地址，即为树莓派的ip地址。</li><li>打开PuTTY<ul><li>host 填入: 开发板 ip 即可。</li><li>用户名、密码同串口登陆一致（默认：pi、raspberry）</li></ul></li></ul><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="更新软件源"><a href="#更新软件源" class="headerlink" title="更新软件源"></a>更新软件源</h3><p>首先查看自己树莓派系统版本，一般有jessie,stretch,buster,wheezy这4个版本。</p><pre><code>No LSB modules are available.Distributor ID:RaspbianDescription:Raspbain GNU/Linux 10 (buster)Release:10Codename: busterCopy</code></pre><p>开始换源</p><pre><code>sudo vim /etc/apt/sources.listCopy</code></pre><p>将默认的内容删掉或者用<code>#</code>号注释，改为</p><pre><code>deb http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/   buster main contrib non-free rpideb-src http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ buster main contrib non-free rpiCopy</code></pre><p>或者用以下地址代替上面的地址栏</p><p>中山大学<br><a href="https://link.zhihu.com/?target=http://mirror.sysu.edu.cn/raspbian/raspbian/">Raspbian http://mirror.sysu.edu.cn/raspbian/raspbian/</a></p><p>中国科学技术大学<br><a href="https://link.zhihu.com/?target=http://mirrors.ustc.edu.cn/raspbian/raspbian/">Raspbian http://mirrors.ustc.edu.cn/raspbian/raspbian/</a></p><p>清华大学<br><a href="https://link.zhihu.com/?target=http://mirrors.tuna.tsinghua.edu.cn/raspbian/">Raspbian </a><a href="https://link.zhihu.com/?target=http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/">http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/</a></p><p>华中科技大学<br><a href="https://link.zhihu.com/?target=http://mirrors.hustunique.com/raspbian/raspbian/">Raspbian http://mirrors.hustunique.com/raspbian/raspbian/</a></p><p><a href="https://link.zhihu.com/?target=http://mirrors.hustunique.com/archlinuxarm/">Arch Linux ARM http://mirrors.hustunique.com/archlinuxarm/</a></p><p>大连东软信息学院源（北方用户）</p><p><a href="https://link.zhihu.com/?target=http://mirrors.neusoft.edu.cn/raspbian/raspbian/">Raspbian http://mirrors.neusoft.edu.cn/raspbian/raspbian/</a></p><p>（可参考Ubuntu配置）</p><p>再更新</p><pre><code>sudo apt updateCopy</code></pre><p>更新系统软件</p><pre><code>sudo apt upgradeCopy</code></pre><h2 id="Web项目"><a href="#Web项目" class="headerlink" title="Web项目"></a>Web项目</h2><h3 id="LNSP"><a href="#LNSP" class="headerlink" title="LNSP"></a>LNSP</h3><p>Linux Nginx SQLite PHP</p><pre><code>sudo apt install nginxsudo apt install php7.3sudo apt install php7.3-fpmsudo apt install php7.3-sqlitesudo apt install php7.3-commonsudo apt install sqliteCopy</code></pre><ul><li>启动 nginx</li></ul><pre><code>sudo /etc/init.d/nginx startCopy</code></pre><ul><li>修改 nginx 的配置文件</li></ul><pre><code>sudo vim /etc/nginx/sites-available/defaultCopy</code></pre><ul><li>PHP 脚本支持</li></ul><p>找到 php 的定义段，将这些行的注释去掉 ，修改后内容如下</p><pre><code># Default server configuration#server &#123;        listen 80 default_server;        listen [::]:80 default_server;         root /var/www/html;         # Add index.php to the list if you are using PHP        index index.html index.htm index.nginx-debian.html index.php;         server_name _;         location / &#123;                 # First attempt to serve request as file, then                 # as directory, then fall back to displaying a 404.                 try_files $uri $uri/ =404;        &#125;         # pass PHP scripts to FastCGI server        #        location ~ \.php$ &#123;                 # include snippets/fastcgi-php.conf;                 #                 # # With php-fpm (or other unix sockets):                 fastcgi_pass unix:/run/php/php7.3-fpm.sock;                 # # With php-cgi (or other tcp sockets):                 # fastcgi_pass 127.0.0.1:9000;                 # 设置脚本文件请求的路径                 fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;                 # 引入fastcgi的配置文件                  include fastcgi_params;        &#125; &#125;Copy</code></pre><ul><li>重新加载 nginx 的配置</li></ul><pre><code>sudo /etc/init.d/nginx reloadCopy</code></pre><ul><li>测试 html</li></ul><p>通过主机的 IE 访问树莓派，可以看到主页 (表示 Web 服务器已正常启动)</p><ul><li>测试 php</li></ul><p>输入下列命令</p><pre><code>sudo chmod 777 /var/            #下面三行给文件授予权限sudo chmod 777 /var/wwwsudo chmod 777 /var/www/htmlCopy</code></pre><p>在树莓派中生成一<code>php</code>文件</p><pre><code>sudo vim /var/www/index.phpCopy</code></pre><p>在文件中输入以下内容</p><pre><code>&lt;?php    print &lt;&lt;&lt; EOT  &lt;!doctype html&gt;  &lt;html lang=&quot;en&quot;&gt;  &lt;head&gt;  &lt;meta charset=&quot;UTF-8&quot;&gt;  &lt;title&gt;Test successful&lt;/title&gt;  &lt;/head&gt;  &lt;body&gt;  &lt;h1&gt;Test successful&lt;/h1&gt;  &lt;p&gt;Congratulations.&lt;/p&gt;  &lt;p&gt;Your webserver and PHP are working.&lt;/p&gt;  &lt;/body&gt;  &lt;/html&gt;  EOT;  ?&gt;Copy</code></pre><p>到此为止，lnsp就安装完毕</p><h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h3><p>官方</p><pre><code>wget https://nodejs.org/dist/v12.16.1/node-v00.00.0-linux-armv7l.tar.xzCopy</code></pre><p>国内镜像</p><pre><code>wget https://npm.taobao.org/mirrors/node/latest/node-v00.00.0-linux-armv7l.tar.xzCopy</code></pre><p>解压：</p><pre><code>xz -d node-v12.13.1-linux-armv7l.tar.xztar -xavf node-v12.13.1-linux-armv7l.tarCopy</code></pre><p>将系统内原本存在的<code>/usr/bin.node</code>删除</p><pre><code>sudo rm -rf /usr/bin/node#如果不存在，忽略此步骤Copy</code></pre><p>解压后，将二进制包移动到<code>/usr/local/node</code>下</p><pre><code>sudo mv ./node-v10.0.0-linux-armv7l /usr/local/nodeCopy</code></pre><p>为<code>node</code>和<code>npm</code>建立软连接，在终端输入：</p><pre><code>sudo ln -s /usr/local/node/bin/node /usr/bin/nodesudo ln -s /usr/local/node/bin/npm /usr/bin/npm#这类似于Windows中的快捷方式Copy</code></pre><p>通过查看<code>node</code>和<code>npm</code>版本的方式来查看是否成功</p><pre><code>node -v &amp;&amp; npm -vCopy</code></pre><p>可以看到对应的版本号说明安装成功</p><p>由于国内网速问题<code>npm</code>包管理器的速度会较慢，利用<code>npm</code>安装<code>cnpm</code>某宝源</p><pre><code>npm install -g cnpm --registry=https://registry.npm.taobao.orgCopy</code></pre><p>为<code>cnpm</code>建立软连接</p><pre><code>sudo ln -s /usr/local/node/bin/cnpm /usr/bin/cnpmCopy</code></pre><blockquote><p>Windows cnpm</p><pre><code>$ npm install cnpm -gCopy</code></pre><p>If you’re in China, maybe you should install it from our <a href="https://npm.taobao.org/">China mirror</a>:</p><pre><code>$ npm install cnpm -g --registry=https://r.npm.taobao.orgCopy</code></pre></blockquote><h3 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h3><p>至于软件，暂时选用Hexo，虽然还有Typecho、WordPress备选，但是先尝试这个。</p><p>主题参考</p><ul><li><a href="https://github.com/fluid-dev/hexo-theme-fluid">fluid</a>（主要看上了打字机特效）</li><li><a href="https://linhong.me/2020/01/27/hexo-theme-aomori/">Aomori</a>（看上了右边栏特效）</li><li><a href="https://github.com/lixuetaoleo/hexo-theme-leo">Ieo</a>（封面）</li><li><a href="https://sharvaridesai.github.io/hexo-theme-edinburgh-demo/">Edinburgh</a>（看设计感）</li><li><a href="https://mrwillcom.github.io/">mrwill</a>（设计感）</li></ul><h3 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h3><p>在本地完成hexo渲染，部署public文件夹到树莓派，完整文件夹git到github仓库。</p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="Linux-常用命令"><a href="#Linux-常用命令" class="headerlink" title="Linux 常用命令"></a>Linux 常用命令</h3><p>文件改名 <code>sudo mv test.txt new.txt\</code></p><ul><li><strong>mkdir xxx</strong> 创建文件夹xxx</li><li><strong>mkdir a1 a2 a3</strong> 批量创建文件夹 a1、文件夹 a2、文件夹 a3</li><li><strong>mkdir -p b1&#x2F;b2&#x2F;b3</strong> 连续创建文件夹 b1、文件夹 b2、文件夹 b3</li></ul><h3 id="RPI串口电路"><a href="#RPI串口电路" class="headerlink" title="RPI串口电路"></a>RPI串口电路</h3>]]></content>
      
      
      
        <tags>
            
            <tag> Raspberry Pi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>A Guide to rebuid the workplace</title>
      <link href="/2020/07/04/guide/"/>
      <url>/2020/07/04/guide/</url>
      
        <content type="html"><![CDATA[<h1 id="重新搭建现有工作环境的指南"><a href="#重新搭建现有工作环境的指南" class="headerlink" title="重新搭建现有工作环境的指南"></a>重新搭建现有工作环境的指南</h1><h2 id="电脑配置清单"><a href="#电脑配置清单" class="headerlink" title="电脑配置清单"></a>电脑配置清单</h2><ul><li>华硕(ASUS)PRIME Z390-A 主板 现价1749元 <a href="https://item.jd.com/100000542145.html">链接</a></li><li>英特尔(Intel)i7-9700KF 约价2799元 <a href="https://item.jd.com/100002106617.html#none">链接</a></li><li>英伟达(NVIDIA)GTX1660 约价1799元 <a href="https://item.jd.com/100003739778.html#none">链接</a>（不确定）</li><li>金士顿(Kingston)DDR4 2400 16GB 现价549元 <a href="https://item.jd.com/2551276.html">链接</a></li><li>三星(SAMSUNG)250GB SSD固态硬盘 M.2接口(NVMe协议) 现价499元 <a href="https://item.jd.com/100002183459.html">链接</a></li><li>西部数据(WD)蓝盘 1TB 现价299元 <a href="https://item.jd.com/675971.html">链接</a></li><li>罗技(Logitech)K310 键盘 现价149元 <a href="https://item.jd.com/712162.html#none">链接</a>（首选）<ul><li>罗技（G）G610机械键盘 现价479元 <a href="https://item.jd.com/3034311.html#none">链接</a>（备选）</li></ul></li><li>罗技（Logitech）M100r 鼠标 现价52.9元 <a href="https://item.jd.com/692919.html">链接</a>（首选）<ul><li>罗技（G）G502 HERO主宰者有线鼠标 现价379元 <a href="https://item.jd.com/100001691967.html#product-detail">链接</a>（备选）</li></ul></li><li>AOC I2490VXH5&#x2F;BS 23.8英寸 现价779元 <a href="https://item.jd.com/100002222528.html?dist=jd#none">链接</a></li><li>乔思伯（JONSBO）U5 银色 ATX机箱 现价499元 <a href="https://item.jd.com/8885801.html#crumb-wrap">链接</a>（不确定）</li><li>酷冷至尊（CoolerMaster） T20 CPU 散热器 现价49元 <a href="https://item.jd.com/19988002706.html#product-detail">链接</a></li><li>长城（GreatWall）额定500W HOPE-6000DS 电源 现价269元 <a href="https://item.jd.com/876229.html">链接</a></li><li>灵蛇（LINGSHE）鼠标垫 现价4.9元 <a href="https://item.jd.com/4062692.html">链接</a></li></ul><p>小计：9565.9元</p><h3 id="机械键盘品牌参考"><a href="#机械键盘品牌参考" class="headerlink" title="机械键盘品牌参考"></a>机械键盘品牌参考</h3><p>宁芝mini84</p><p>阿米洛sword</p><p>Filco</p><p>Leopold</p><p>杜伽</p><h2 id="应用列表"><a href="#应用列表" class="headerlink" title="应用列表"></a>应用列表</h2><h3 id="普通使用"><a href="#普通使用" class="headerlink" title="普通使用"></a>普通使用</h3><ul><li>chrome</li><li>Potplayer</li><li>Bandizip</li><li>Lantern</li><li>TranslucentTB</li><li>Xmind<ul><li>mindmaster</li><li>freemind</li></ul></li><li>坚果云</li><li>Joplin</li><li>Everything</li><li>Wox</li><li>网易云音乐</li><li>小黑盒</li><li>幕布</li><li>有道云笔记</li><li>Steam</li><li>Pokemmo</li><li>QuickLook</li></ul><h3 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h3><h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><ul><li>Git</li><li>Node.js</li><li>Hexo</li><li>Java JDk</li><li>Python</li><li>MinGW-64w</li><li>Tex Live</li><li>VMware Workstation<ul><li>ubuntu</li></ul></li><li>wsl子系统<ul><li>Ubuntu</li><li>VcXsrv</li></ul></li></ul><h4 id="编辑器-x2F-IDE"><a href="#编辑器-x2F-IDE" class="headerlink" title="编辑器&#x2F;IDE"></a>编辑器&#x2F;IDE</h4><ul><li><p>Visual Studio Code</p></li><li><p>Atom</p></li><li><p>Visual Studio</p></li><li><p>Codelite</p></li><li><p>Typora</p></li><li><p>Vim</p></li><li><p>Neovim</p></li><li><p>Eclipse</p></li><li><p>JetBrains系</p><ul><li>CLion(附破解)</li></ul></li></ul><h3 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h3><ul><li><p>Mockplus(做原型可选，主用XD)</p></li><li><p>达芬奇</p></li><li><p>Zeplin</p></li><li><p>Gimp</p></li><li><p>Adobe系</p><ul><li>Creative Cloud</li><li>Photoshop</li><li>Premiere Pro</li><li>Media ENcoder</li><li>Lightroom Classic</li><li>XD</li><li>Illustrator</li><li>Audition</li></ul></li></ul><h3 id="音乐"><a href="#音乐" class="headerlink" title="音乐"></a>音乐</h3><ul><li><p>FL Studio</p></li><li><p>guitar pro 7</p></li></ul><h3 id="字体资源列表"><a href="#字体资源列表" class="headerlink" title="字体资源列表"></a>字体资源列表</h3><p>文件在字体文件夹里</p><ul><li>Source Code Pro —adobe</li><li>思源黑体</li><li>思源宋体</li><li>禹卫书法行书简体</li></ul><h2 id="文件夹"><a href="#文件夹" class="headerlink" title="文件夹"></a>文件夹</h2><ul><li>Private</li><li>Material</li><li>Project</li></ul><h2 id="附各类应用配置"><a href="#附各类应用配置" class="headerlink" title="附各类应用配置"></a>附各类应用配置</h2><h4 id="Chrome"><a href="#Chrome" class="headerlink" title="Chrome"></a>Chrome</h4><p>&#x2F;&#x2F;不知道用户同步能不能用</p><p>扩展：gooreplacerv3.9（放在工具文件夹）</p><p>书签:</p><ul><li><p><a href="https://www.github.com/">Github</a></p></li><li><p><a href="https://translate.google.cn/?hl=zh-CN&tab=TT">Google 翻译</a></p></li><li><p><a href="https://www.zhihu.com/">知乎</a></p></li><li><p><a href="https://www.bilibili.com/">Bilibli</a></p></li><li><p><a href="https://www.jiumodiary.com/">鸠摩搜索</a></p></li><li><p><a href="https://bitbucket.org/product/">Bitbucket</a></p></li><li><p><a href="https://phys.org/">Phys.org</a></p></li><li><p><a href="https://www.feynmanlectures.caltech.edu/">The Feynman Lectures on Physics</a></p></li><li><p><a href="https://www.audiolibrary.com.co/">Audio Library</a></p></li><li><p><a href="http://www.doyoudo.com/">doyoudo</a></p></li><li><p><a href="http://pengzhihui.xyz/">稚晖的个人站</a></p></li><li><p><a href="https://xenwayne.top/">XenWayne‘s Blog</a></p></li><li><p><a href="https://rafaltomal.com/">Rafal Tomal</a></p></li><li><p><a href="https://esappear.github.io/clover/">Clover Tuan</a></p></li><li><p><a href="https://www.arduino.cc/">Arduino</a></p></li><li><p><a href="https://www.raspberrypi.org/">Raspberry Pi</a></p></li><li><p><a href="https://www.dandyweng.com/">翁天信 · Dandy Weng 的个人网站主页</a></p></li><li><p><a href="https://www.julydate.com/">七夏浅笑</a></p></li><li><p><a href="https://www.lhteam.top/">LHteam</a></p></li><li><p><a href="https://element.eleme.cn/#/zh-CN">Element</a></p></li><li><p><a href="https://crashcourse.club/">CrashCourse</a></p></li><li><p><a href="https://bigjpg.com/zh">Bigjpg</a></p></li><li><p><a href="https://dribbble.com/">Dribbble</a></p></li><li><p><a href="https://www.webdesignrankings.com/resources/lolcolors/">LOL Colors - Curated color palette inspiration</a></p></li><li><p><a href="https://www.bootcss.com/p/websafecolors/">Web安全色</a></p></li><li><p><a href="https://color.adobe.com/create/color-wheel/">adobeColor</a></p></li><li><p><a href="https://flatuicolors.com/">Palettes</a></p></li><li><p><a href="https://colorsupplyyy.com/app">Color Picker</a></p></li><li><p><a href="https://mycolor.space/">ColorSpace</a></p></li><li><p><a href="https://www.iconfont.cn/">iconfont</a></p></li><li><p><a href="https://www.freepik.com/">Free Vectors, Photos and PSD Downloads | Freepik</a></p></li><li><p><a href="https://unsplash.com/">Unsplash</a></p></li><li><p><a href="https://balsamiq.com/">Balsamiq</a></p></li><li><p><a href="https://www.easyicon.net/">Easyicon</a></p></li><li><p><a href="https://magdeleine.co/">Magdeleine</a></p></li><li><p><a href="https://www.splitshire.com/">SplitShire</a></p></li><li><p><a href="https://flaticons.net/">FlatIcons</a></p></li><li><p><a href="https://www.91sotu.com/">搜图导航</a></p></li><li><p><a href="https://huaban.com/">花瓣网</a></p></li><li><p><a href="https://acg.rip/">ACG.RIP</a></p></li><li><p><a href="http://www.xuanfengge.com/funny/html5/element/">HTML5元素周期表</a></p></li><li><p><a href="https://zigzagpack.com/">ZigZag Pack</a></p></li><li><p><a href="https://www.udemy.com/">Udemy</a></p></li><li><p><a href="https://www.yuque.com/guigumentor/guigu">鬼谷·全球 · 语雀</a></p></li><li><p><a href="https://liam.page/2014/09/08/latex-introduction/">一份其实很短的 LaTeX 入门文档 | 始终</a></p></li><li><p><a href="https://www.jianshu.com/p/b31ae75ab6df">好书整理-朗道十卷+费曼物理学讲义+中英文 - 简书</a></p></li><li><p><a href="https://apps.evozi.com/apk-sownloader/">Evozi Apps</a></p></li><li><p><a href="https://magi.com/">Magi</a></p></li><li><p><a href="https://www.geogebra.org/">GeoGebra</a></p></li></ul><h4 id="Visual-Studio-Code"><a href="#Visual-Studio-Code" class="headerlink" title="Visual Studio Code"></a>Visual Studio Code</h4><p>插件：</p><ul><li>Auto Rename Tag</li><li>Autoprefixer</li><li>beautify</li><li>Prettier - Code formatter(format on save 查找是否应用存文件时格式化)</li><li>Bracket Pair Colorizer 2</li><li>Chinese(Simplified)Language Pack for Visual Studio Code</li><li>Code Spell Checker</li><li>file-size</li><li>Guides</li><li>Highlight</li><li>Image preview</li><li>Latex Workshop(需额外配置，附配置文件)</li><li>Live Server</li><li>Markdown PDF</li><li>Markdown Preview Enhanced</li><li>Markdown Theme Kit</li><li>markdownlint</li><li>Material Theme</li><li>Community Material Theme</li><li>Material Theme Icons</li><li>Path intellisense</li><li>Settings Sync</li><li>SVG</li><li>C&#x2F;C++</li><li>Cobalt Next</li><li>Cobalt2 Theme Official</li><li>Code Runner</li><li>Marp for VS Code</li><li>Path Interllisense</li></ul><p>另附:</p><p>C语言环境设置<code>.vscode</code>在project的C文件夹里</p><p>VS Code 设置json文件</p><pre><code class="json">&#123;    &quot;workbench.iconTheme&quot;: &quot;material-icon-theme&quot;,    &quot;editor.renderIndentGuides&quot;: false,    &quot;workbench.colorTheme&quot;: &quot;Cobalt Next&quot;,    &quot;cSpell.userWords&quot;: [        &quot;Bandizip&quot;,        &quot;HWND&quot;,        &quot;Lightroom&quot;,        &quot;Minecraft&quot;,        &quot;Mockplus&quot;,        &quot;Mware&quot;,        &quot;Photoshop&quot;,        &quot;Potplayer&quot;,        &quot;Typora&quot;,        &quot;Xmind&quot;,        &quot;Zahlen&quot;,        &quot;Zeplin&quot;,        &quot;anchorjs&quot;,        &quot;cnzz&quot;,        &quot;doyoudo&quot;,        &quot;favicon&quot;,        &quot;hexo&quot;,        &quot;iconfont&quot;,        &quot;mware&quot;,        &quot;subseteq&quot;,        &quot;tencent&quot;,        &quot;v&quot;    ],    &quot;workbench.statusBar.visible&quot;: true,    &quot;editor.fontFamily&quot;: &quot;Source Code Pro,Consolas, &#39;Courier New&#39;, monospace&quot;,    &quot;workbench.startupEditor&quot;: &quot;newUntitledFile&quot;,    &quot;C_Cpp.updateChannel&quot;: &quot;Insiders&quot;,    // Latex workshop    &quot;latex-workshop.latex.tools&quot;: [        &#123;            // 编译工具和命令            &quot;name&quot;: &quot;latexmk&quot;,            &quot;command&quot;: &quot;latexmk&quot;,            &quot;args&quot;: [                &quot;-synctex=1&quot;,                &quot;-interaction=nonstopmode&quot;,                &quot;-file-line-error&quot;,                &quot;-pdf&quot;,                &quot;-outdir=%OUTDIR%&quot;,                &quot;%DOC%&quot;            ],            &quot;env&quot;: &#123;&#125;        &#125;,        &#123;            &quot;name&quot;: &quot;xelatex&quot;,            &quot;command&quot;: &quot;xelatex&quot;,            &quot;args&quot;: [                &quot;-synctex=1&quot;,                &quot;-interaction=nonstopmode&quot;,                &quot;-file-line-error&quot;,                &quot;-pdf&quot;,                &quot;-outdir=%OUTDIR%&quot;,                &quot;%DOC%&quot;            ]        &#125;,        &#123;            &quot;name&quot;: &quot;lualatexmk&quot;,            &quot;command&quot;: &quot;latexmk&quot;,            &quot;args&quot;: [                &quot;-synctex=1&quot;,                &quot;-interaction=nonstopmode&quot;,                &quot;-file-line-error&quot;,                &quot;-lualatex&quot;,                &quot;-outdir=%OUTDIR%&quot;,                &quot;%DOC%&quot;            ],            &quot;env&quot;: &#123;&#125;        &#125;,        &#123;            &quot;name&quot;: &quot;latexmk_rconly&quot;,            &quot;command&quot;: &quot;latexmk&quot;,            &quot;args&quot;: [                &quot;%DOC%&quot;            ],            &quot;env&quot;: &#123;&#125;        &#125;,        &#123;            &quot;name&quot;: &quot;pdflatex&quot;,            &quot;command&quot;: &quot;pdflatex&quot;,            &quot;args&quot;: [                &quot;-synctex=1&quot;,                &quot;-interaction=nonstopmode&quot;,                &quot;-file-line-error&quot;,                &quot;%DOC%&quot;            ],            &quot;env&quot;: &#123;&#125;        &#125;,        &#123;            &quot;name&quot;: &quot;bibtex&quot;,            &quot;command&quot;: &quot;bibtex&quot;,            &quot;args&quot;: [                &quot;%DOCFILE%&quot;            ],            &quot;env&quot;: &#123;&#125;        &#125;    ],    &quot;latex-workshop.latex.recipes&quot;: [        &#123;            &quot;name&quot;: &quot;xelatex&quot;,            &quot;tools&quot;: [                &quot;xelatex&quot;            ]        &#125;,        &#123;            &quot;name&quot;: &quot;latexmk 🔃&quot;,            &quot;tools&quot;: [                &quot;latexmk&quot;            ]        &#125;,        &#123;            &quot;name&quot;: &quot;xelatex ➞ xelatex&quot;,            &quot;tools&quot;: [                &quot;xelatex&quot;,                &quot;xelatex&quot;            ]        &#125;,        &#123;            &quot;name&quot;: &quot;xelatex ➞ bibtex ➞ xelatex × 2&quot;,            &quot;tools&quot;: [                &quot;xelatex&quot;,                &quot;bibtex&quot;,                &quot;xelatex&quot;,                &quot;xelatex&quot;            ]        &#125;,        &#123;            &quot;name&quot;: &quot;latexmk (latexmkrc)&quot;,            &quot;tools&quot;: [                &quot;latexmk_rconly&quot;            ]        &#125;,        &#123;            &quot;name&quot;: &quot;latexmk (lualatex)&quot;,            &quot;tools&quot;: [                &quot;lualatexmk&quot;            ]        &#125;,        &#123;            &quot;name&quot;: &quot;pdflatex ➞ bibtex ➞ pdflatex × 2&quot;,            &quot;tools&quot;: [                &quot;pdflatex&quot;,                &quot;bibtex&quot;,                &quot;pdflatex&quot;,                &quot;pdflatex&quot;            ]        &#125;    ],    &quot;latex-workshop.view.pdf.viewer&quot;: &quot;external&quot;,    &quot;latex-workshop.view.pdf.external.command&quot;: &#123;    &quot;command&quot;: &quot;D:/SumatraPDF/SumatraPDF.exe&quot;,    &quot;args&quot;: [        &quot;%PDF%&quot;    ]    &#125;,    &quot;latex-workshop.view.pdf.external.synctex&quot;: &#123;        //正向搜索        &quot;command&quot;: &quot;D:/SumatraPDF/SumatraPDF.exe&quot;,        &quot;args&quot;: [            &quot;-forward-search&quot;,            &quot;%TEX%&quot;,            &quot;%LINE%&quot;,            &quot;%PDF%&quot;        ]    &#125;,    &quot;latex-workshop.latex.clean.fileTypes&quot;: [        &quot;*.aux&quot;,        &quot;*.bbl&quot;,        &quot;*.blg&quot;,        &quot;*.idx&quot;,        &quot;*.ind&quot;,        &quot;*.lof&quot;,        &quot;*.lot&quot;,        &quot;*.out&quot;,        &quot;*.toc&quot;,        &quot;*.acn&quot;,        &quot;*.acr&quot;,        &quot;*.alg&quot;,        &quot;*.glg&quot;,        &quot;*.glo&quot;,        &quot;*.gls&quot;,        &quot;*.ist&quot;,        &quot;*.fls&quot;,        &quot;*.log&quot;,        &quot;*.fdb_latexmk&quot;    ],    &quot;latex-workshop.latex.autoBuild.run&quot;: &quot;never&quot;,    &quot;terminal.integrated.shell.windows&quot;: &quot;C:\\Windows\\System32\\cmd.exe&quot;,    &quot;sync.gist&quot;: &quot;ce4d87f82ed3f5648debe41732530e35&quot;,    &quot;cSpell.enableFiletypes&quot;: [        &quot;tex&quot;    ]    &#125;</code></pre><h4 id="Atom"><a href="#Atom" class="headerlink" title="Atom"></a>Atom</h4><p>插件：</p><ul><li>atom-beautify</li><li>atom-gpp-compiler</li><li>atom-live-server</li><li>atom-markdown-table-editor</li><li>atom-material-syntax</li><li>atom-material-syntax-dark</li><li>atom-material-syntax-light</li><li>atom-material-ui</li><li>atom-minimap-plus</li><li>atom-quick-highlight</li><li>atom-script</li><li>atom-simplified-chinese-menu</li><li>busy-signal</li><li>color-picker</li><li>emmet-atom</li><li>file-icons</li><li>intentions</li><li>linter</li><li>linter-gcc</li><li>linter-javac</li><li>linter-jshint</li><li>linter-markdown</li><li>linter-phpcs</li><li>linter-pylint</li><li>linter-ui-default</li><li>markdown-preview-enhanced</li><li>monoid-ui</li><li>monoid-syntax</li><li>seti-syntax</li><li>seti-ui</li></ul><h4 id="CLion"><a href="#CLion" class="headerlink" title="CLion"></a>CLion</h4><p>破解获取链接</p><pre><code>http://idea.medeming.com/jets/http://idea.medeming.com/jihuo/</code></pre><h4 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h4><p>主题</p><ul><li>Barfi</li><li>Cobalt</li><li>Github</li><li>Gitlab</li><li>Newsprint</li><li>Night</li><li>PixyII</li><li>Vue Dark</li><li>Vue</li><li>Whitey</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> guide </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Trip to Ubuntu</title>
      <link href="/2020/03/20/Trip-to-Ubuntu/"/>
      <url>/2020/03/20/Trip-to-Ubuntu/</url>
      
        <content type="html"><![CDATA[<h2 id="Trip-to-Ubuntu"><a href="#Trip-to-Ubuntu" class="headerlink" title="Trip to Ubuntu"></a>Trip to Ubuntu</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>前几天我在Microsoft Store里发现了Ubuntu，它是运行在Windows上的子系统，第一时间我就开始了Ubuntu的配置探索之旅。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>我在Microsoft Store安装之后，发现它是装在C盘系统盘的，为了节省C盘空间，我采取了转移到非系统盘的方式</p><p>通过安装，我定位到了它的安装路径</p><pre><code>C:\Users\xxxx\AppData\Local\Packages\CanonicalGroupLimited.UbuntuonWindows_79rhkp1fndgsc</code></pre><p>接着，我将它卸载，通过创建软链接来解决这个问题</p><p>先在想要安装的位置创建了Ubuntu文件夹</p><p>然后打开<code>cmd</code>终端，输入</p><pre><code class="bash">mklink /j C:\Users\XXXX\AppData\Local\Packages\CanonicalGroupLimited.UbuntuonWindows_79rhkp1fndgsc  D:\Ubuntu\</code></pre><p>创建成功后，再重新在Microsoft Store中安装Ubuntu</p><p>安装过程中如果出现了安装失败的问题，可以运行</p><pre><code class="bash">icacls D:\Ubuntu /grant &quot;用户名:(OI)(CI)(F)&quot;</code></pre><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h4><p>清华源</p><ul><li>网址：<a href="https://link.zhihu.com/?target=https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/">https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/</a></li><li>源地址：<a href="https://link.zhihu.com/?target=https://mirrors.tuna.tsinghua.edu.cn/ubuntu/">https://mirrors.tuna.tsinghua.edu.cn/ubuntu/</a></li></ul><pre><code># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse# 预发布软件源，不建议启用# deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</code></pre><p>阿里源</p><ul><li>网址：<a href="https://link.zhihu.com/?target=https://opsx.alibaba.com/guide?lang=zh-CN&document=69a2341e-801e-11e8-8b5a-00163e04cdbb">https://opsx.alibaba.com/guide?lang=zh-CN&document=69a2341e-801e-11e8-8b5a-00163e04cdbb</a></li><li>源地址：<a href="https://link.zhihu.com/?target=http://mirrors.aliyun.com/ubuntu/">http://mirrors.aliyun.com/ubuntu/</a></li></ul><pre><code># 默认注释了源码仓库，如有需要可自行取消注释deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse# deb-src https://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse# deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse# deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse# deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse# 预发布软件源，不建议启用# deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse# deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</code></pre><p>中科大源</p><ul><li>网址：<a href="https://link.zhihu.com/?target=http://mirrors.ustc.edu.cn/help/ubuntu.html">http://mirrors.ustc.edu.cn/help/ubuntu.html</a></li><li>源地址：<a href="https://link.zhihu.com/?target=https://mirrors.ustc.edu.cn/ubuntu/">https://mirrors.ustc.edu.cn/ubuntu/</a></li></ul><pre><code># 默认注释了源码仓库，如有需要可自行取消注释deb https://mirrors.ustc.edu.cn/ubuntu/ bionic main restricted universe multiverse# deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic main restricted universe multiversedeb https://mirrors.ustc.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse# deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-updates main restricted universe multiversedeb https://mirrors.ustc.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse# deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-backports main restricted universe multiversedeb https://mirrors.ustc.edu.cn/ubuntu/ bionic-security main restricted universe multiverse# deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-security main restricted universe multiverse# 预发布软件源，不建议启用# deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse# deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</code></pre><p>网易源</p><ul><li>网址：<a href="https://link.zhihu.com/?target=http://mirrors.163.com/.help/ubuntu.html">http://mirrors.163.com/.help/ubuntu.html</a></li><li>源地址：<a href="https://link.zhihu.com/?target=http://mirrors.163.com/">http://mirrors.163.com</a></li></ul><pre><code># 默认注释了源码仓库，如有需要可自行取消注释deb http://mirrors.163.com/ubuntu/ bionic main restricted universe multiverse# deb-src https://mirrors.163.com/ubuntu/ bionic main restricted universe multiversedeb http://mirrors.163.com/ubuntu/ bionic-updates main restricted universe multiverse# deb-src http://mirrors.163.com/ubuntu/ bionic-updates main restricted universe multiversedeb http://mirrors.163.com/ubuntu/ bionic-backports main restricted universe multiverse# deb-src http://mirrors.163.com/ubuntu/ bionic-backports main restricted universe multiversedeb http://mirrors.163.com/ubuntu/ bionic-security main restricted universe multiverse# deb-src http://mirrors.163.com/ubuntu/ bionic-security main restricted universe multiverse# 预发布软件源，不建议启用# deb http://mirrors.163.com/ubuntu/ bionic-proposed main restricted universe multiverse# deb-src http://mirrors.163.com/ubuntu/ bionic-proposed main restricted universe multiverse</code></pre><p>先对系统给的镜像源进行备份，以防止出现问题</p><pre><code class="bash">$ sudo cp /etc/apt/sources.list /etc/apt/sources.list.backup </code></pre><p>然后，修改数据源配置文件</p><pre><code class="bash">$ sudo vim /etc/apt/sources.list</code></pre><p>选择一个源添加到文件最前面或直接将官方的源注释掉替换掉原文件</p><p>更新软件源中的所有软件列表：</p><pre><code class="bash">$ sudo apt-get update</code></pre><p>更新软件：</p><pre><code class="bash">$ sudo apt-get upgrade</code></pre><p>更新系统版本：</p><pre><code class="bash">$ sudo apt-get dist-upgrade</code></pre><p>下载中文语言包：</p><pre><code class="bash">$ sudo apt-get install language-pack-zh-han*</code></pre><h4 id="安装-C-x2F-C-开发环境"><a href="#安装-C-x2F-C-开发环境" class="headerlink" title="安装 C&#x2F;C++ 开发环境"></a>安装 C&#x2F;C++ 开发环境</h4><p>安装编译工具包：</p><pre><code class="bash">$ sudo apt-get install build-essential</code></pre><p>安装 nginx 依赖库：</p><pre><code class="bash">$ sudo apt-get install libpcre3 libpcre3-dev libpcrecpp0 libssl-dev zlib1g-dev</code></pre><h4 id="图形界面"><a href="#图形界面" class="headerlink" title="图形界面"></a>图形界面</h4><p>首先安装使用VcXsrv Windows X Server</p><p>启动Launcher，首次启动自动进入界面设置后，选择：“one large window”，Display number设置成0，其它默认即可：</p><p><strong>安装桌面环境</strong></p><pre><code class="bash">sudo apt-get install ubuntu-desktop unity compizconfig-settings-manager</code></pre><p>启动之前安装的X-Windows，在Bash中执行如下命令：</p><pre><code class="bash">export  DISPLAY=localhost:0ccsm</code></pre><p><strong>启动compiz (打开桌面)</strong></p><pre><code class="bash">compiz</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>first blog</title>
      <link href="/2020/02/02/first-blog/"/>
      <url>/2020/02/02/first-blog/</url>
      
        <content type="html"><![CDATA[<h2 id="这是我的第一条blog"><a href="#这是我的第一条blog" class="headerlink" title="这是我的第一条blog"></a>这是我的第一条blog</h2><p>今天我捣鼓着使用 hexo + Github 的方式搭建了自己的博客，从今天开始维护，希望自己能坚持下去。</p><p>加油鸭！！！</p>]]></content>
      
      
      
        <tags>
            
            <tag> first blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
